# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2024-11-06 23:52+0900\n"
"PO-Revision-Date: 2024-11-10 13:43+0900\n"
"Last-Translator: ayatakesi\n"
"Language-Team: japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:2
msgid "NDK BUILD SYSTEM IMPLEMENTATION"
msgstr "# NDK BUILD SYSTEM IMPLEMENTATION"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:5
msgid "Copyright (C) 2023-2024 Free Software Foundation, Inc.  See the end of the file for license conditions."
msgstr "Copyright (C) 2023-2024 Free Software Foundation, Inc.  See the end of the file for license conditions."

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:9
msgid "Emacs implements ndk-build itself, because the version that comes with the Android NDK is not easy to use from another Makefile, and keeps accumulating incompatible changes."
msgstr "Emacsはndk-buildを独自に実装する。他のMakefileから使うAndroid NDK同梱バージョンを使うのは容易ではなく、互換性のない変更が加え続けられるからである。"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:11
msgid "The Emacs implementation of ndk-build consists of one m4 file:"
msgstr "Emacsにおけるndk-buildは1つのm4ファイル:"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:13
#, no-wrap
msgid "  m4/ndk-build.m4\n"
msgstr ""
"```text\n"
"m4/ndk-build.m4\n"
"```\n"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:15
msgid "four Makefiles in build-aux, run during configure:"
msgstr "configure中に実行されるbuild-auxの4つMakefile:"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:20
#, no-wrap
msgid ""
"  build-aux/ndk-build-helper-1.mk\n"
"  build-aux/ndk-build-helper-2.mk\n"
"  build-aux/ndk-build-helper-3.mk\n"
"  build-aux/ndk-build-helper.mk\n"
msgstr ""
"```text\n"
"build-aux/ndk-build-helper-1.mk\n"
"build-aux/ndk-build-helper-2.mk\n"
"build-aux/ndk-build-helper-3.mk\n"
"build-aux/ndk-build-helper.mk\n"
"```\n"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:22
msgid "one awk script in build-awx, run during configure:"
msgstr "configure中に実行されるbuild-awxの1つのawkスクリプト:"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:24
#, no-wrap
msgid "  build-aux/ndk-module-extract.awk\n"
msgstr ""
"```text\n"
"build-aux/ndk-module-extract.awk\n"
"```\n"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:26
msgid "seven Makefiles in cross/ndk-build,"
msgstr "cross/ndk-buildの7つのMakefile:"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:34
#, no-wrap
msgid ""
"  cross/ndk-build/ndk-build-shared-library.mk\n"
"  cross/ndk-build/ndk-build-static-library.mk\n"
"  cross/ndk-build/ndk-build-executable.mk\n"
"  cross/ndk-build/ndk-clear-vars.mk\n"
"  cross/ndk-build/ndk-prebuilt-shared-library.mk\n"
"  cross/ndk-build/ndk-prebuilt-static-library.mk\n"
"  cross/ndk-build/ndk-resolve.mk\n"
msgstr ""
"```text\n"
"cross/ndk-build/ndk-build-shared-library.mk\n"
"cross/ndk-build/ndk-build-static-library.mk\n"
"cross/ndk-build/ndk-build-executable.mk\n"
"cross/ndk-build/ndk-clear-vars.mk\n"
"cross/ndk-build/ndk-prebuilt-shared-library.mk\n"
"cross/ndk-build/ndk-prebuilt-static-library.mk\n"
"cross/ndk-build/ndk-resolve.mk\n"
"```\n"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:37
msgid "and finally, two more Makefiles in cross/ndk-build, generated by configure:"
msgstr "さらにconfigureが生成するcross/ndk-buildの2つのMakefile:"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:40
#, no-wrap
msgid ""
"  cross/ndk-build/Makefile     (generated from cross/ndk-build/Makefile.in)\n"
"  cross/ndk-build/ndk-build.mk (generated from cross/ndk-build/ndk-build.mk.in)\n"
msgstr ""
"```text\n"
"cross/ndk-build/Makefile     (cross/ndk-build/Makefile.inより生成)\n"
"cross/ndk-build/ndk-build.mk (cross/ndk-build/ndk-build.mk.inより生成)\n"
"```\n"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:45
msgid "m4/ndk-build.m4 is a collection of macros which are used by the configure script to set up the ndk-build system, look for modules, add the appropriate options to LIBS and CFLAGS, and generate the Makefiles necessary to build the rest of Emacs."
msgstr "m4/ndk-build.m4はconfigureスクリプトが用いるマクロコレクションでありndk-buildシステムのセットアップ、モジュール検索、LIBSとCFLAGSに適切なオプションをセットしたり、Emacsの残りの部分のビルドに必要なMakefileを生成するために使用される。"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:49
msgid "Immediately after determining the list of directories in which to look for ``Android.mk'' files, the version and type of Android system being built for, configure calls:"
msgstr "configureは`Android.mk`ファイルを検索するディレクトリー、およびビルド対象となるAndroidシステムのバージョンとタイプを決定した直後に以下を呼び出す:"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:51
#, no-wrap
msgid "  ndk_INIT([$android_abi], [$ANDROID_SDK], [cross/ndk-build])\n"
msgstr ""
"```shell\n"
"ndk_INIT([$android_abi], [$ANDROID_SDK], [cross/ndk-build])\n"
"```\n"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:57
msgid "This expands to a sequence of shell script that enumerates all of the Android.mk files specified in \"$with_ndk_path\", sets up some shell functions used by the rest of the ndk-build code run by the configure script, and teaches the ndk-build system that the Makefiles to be generated are found in the directory \"cross/ndk-build/Makefile\"."
msgstr "これは\"$with_ndk_path\"に指定されたAndroid.mkファイルすべてを列挙する一連のシェルスクリプトに展開されて、configureスクリプトが実行する残りのndk-buildコードの実行に使用されるいくつかのシェル関数をセットアップ、ndk-buildに生成されたmakefile\"cross/ndk-build/Makefile\"にあることを伝える。"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:62
msgid "When configure is cross-compiling for Android, the macro EMACS_CHECK_MODULES will expand to the macro ndk_CHECK_MODULES, instead of pkg-config.m4's PKG_CHECK_MODULES.  Thus, the following code:"
msgstr "configureはAndroid用のクロスコンパイルの際には、マクロEMACS_CHECK_MODULESをpkg-config.m4のPKG_CHECK_MODULESではなく、マクロndk_CHECK_MODULESに展開する。したがって以下のコードは:"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:64
#, no-wrap
msgid "    EMACS_CHECK_MODULES([PNG], [libpng >= 1.0.0])\n"
msgstr ""
"```shell\n"
"EMACS_CHECK_MODULES([PNG], [libpng >= 1.0.0])\n"
"```\n"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:66
msgid "will actually expand to:"
msgstr "実際には以下のように展開される:"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:69
#, no-wrap
msgid ""
"    ndk_CHECK_MODULES([PNG], [libpng >= 1.0.0], [HAVE_PNG=yes],\n"
"\t\t      [HAVE_PNG=no])\n"
msgstr ""
"```shell\n"
"ndk_CHECK_MODULES([PNG], [libpng >= 1.0.0], [HAVE_PNG=yes],\n"
"               [HAVE_PNG=no])\n"
"```\n"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:71
msgid "which in turn expands to a sequence shell script that first invokes:"
msgstr "これは最初に以下を呼び出す一連のシェルスクリプトに順次展開される:"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:73
#, no-wrap
msgid "    make -f build-aux/ndk-build-helper.mk\n"
msgstr ""
"```shell\n"
"make -f build-aux/ndk-build-helper.mk\n"
"```\n"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:76
msgid "for each ``Android.mk'' file found by ndk_INIT, with the following variables given to Make:"
msgstr "ndk_INITが見つけた`Android.mk`それぞれにたいして、Makeに以下の変数が与えられる:"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:83
#, no-wrap
msgid ""
"    EMACS_SRCDIR=.  # the source directory (in which configure is running)\n"
"    BUILD_AUXDIR=$ndk_AUX_DIR # the build-aux directory\n"
"    EMACS_ABI=$ndk_ABI # this is the $android_abi given to ndk_INIT\n"
"    ANDROID_MAKEFILE=\"/opt/android/libpng/Android.mk\"\n"
"    ANDROID_MODULE_DIRECTORY=\"/opt/android/libpng\"\n"
"    NDK_BUILD_DIR=\"$ndk_DIR\" # this is the directory given as to ndk_INIT\n"
msgstr ""
"```make\n"
"EMACS_SRCDIR=.  # (configureが実行される)ソースディレクトリー\n"
"BUILD_AUXDIR=$ndk_AUX_DIR # build-auxディレクトリー\n"
"EMACS_ABI=$ndk_ABI # ndk_INITに与えられた$android_abi\n"
"ANDROID_MAKEFILE=\"/opt/android/libpng/Android.mk\"\n"
"ANDROID_MODULE_DIRECTORY=\"/opt/android/libpng\"\n"
"NDK_BUILD_DIR=\"$ndk_DIR\" # ndk_INITに与えられたディレクトリー\n"
"```\n"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:90
msgid "build-aux/ndk-build-helper.mk will then evaluate the contents $(ANDROID_MAKEFILE), the ``Android.mk'' file, for the first time.  The purpose of this evaluation is to establish a list of packages (or modules) provided by the ``Android.mk'' file, and the corresponding Makefile targets and compiler and linker flags required to build and link to those targets."
msgstr "ここで初めてbuild-aux/ndk-build-helper.mkは$(ANDROID_MAKEFILE)、すなわち`Android.mk`の内容を評価する。`Android.mk`によって提供されるパッケージ(あるいはモジュール)のリスト、それらに対応するMakefileのtarget、targetのビルドとリンクに必要なコンパイラーフラグ、リンカーフラグを確立することがこの評価の目的である。"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:94
msgid "Before doing so, build-aux/ndk-build-helper.mk will define several variables and functions required by all ``Android.mk'' files.  The most important of these are:"
msgstr "これを行う前にbuild-aux/ndk-build-helper.mkは、すべての`Android.mk`ファイルにとって必要ないくつかの変数および関数を定義する:"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:100
#, no-wrap
msgid ""
"  my-dir # the directory containing the Android.mk file.\n"
"  BUILD_SHARED_LIBRARY # build-aux/ndk-build-helper-1.mk\n"
"  BUILD_STATIC_LIBRARY # build-aux/ndk-build-helper-2.mk\n"
"  BUILD_EXECUTABLE # build-aux/ndk-build-helper-3.mk\n"
"  CLEAR_VARS # build-aux/ndk-build-helper-4.mk\n"
msgstr ""
"```make\n"
"my-dir # Android.mkファイルがあるディレクトリー\n"
"BUILD_SHARED_LIBRARY # build-aux/ndk-build-helper-1.mk\n"
"BUILD_STATIC_LIBRARY # build-aux/ndk-build-helper-2.mk\n"
"BUILD_EXECUTABLE # build-aux/ndk-build-helper-3.mk\n"
"CLEAR_VARS # build-aux/ndk-build-helper-4.mk\n"
"```\n"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:106
msgid "Then, ``Android.mk'' will include $(CLEAN_VARS), possibly other ``Android.mk'' files, (to clear variables previously set), set several variables describing each module to the ndk-build system, and include one of $(BUILD_SHARED_LIBRARY), $(BUILD_STATIC_LIBRARY) and $(BUILD_EXECUTABLE)."
msgstr "次に`Android.mk`は$(CLEAN_VARS)をインクルード、もしかしたら別の``Android.mk`をインクルード(前にセットされた変数をクリアーするために)、そしてそれぞれのモジュールをndk-buildシステムにたいして記述するための変数をいくつかセットしてから$(BUILD_SHARED_LIBRARY)、$(BUILD_STATIC_LIBRARY)、$(BUILD_EXECUTABLE)のいずれかをインクルードする。"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:111
msgid "Each one of those three scripts will then read from the variables set by ``Android.mk'', resolve dependencies, and print out some text describing the module to Emacs.\t For example, the shared library module \"libpng\" results in the following text being printed:"
msgstr "これら3つのスクリプトはそれぞれ`Android.mk`がセットした変数を読み込み、依存関係を解決してからEmacsにモジュールを記述するテキストをプリントする。たとえば共有ライブラリーのモジュール\"libpng\"の場合には、以下のようなテキストがプリントされるだろう:"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:116
msgid "Building shared libpng /opt/android/libpng/png.c /opt/android/libpng/pngerror.c /opt/android/libpng/pngget.c /opt/android/libpng/pngmem.c /opt/android/libpng/pngpread.c /opt/android/libpng/pngread.c /opt/android/libpng/pngrio.c /opt/android/libpng/pngrtran.c /opt/android/libpng/pngrutil.c /opt/android/libpng/pngset.c /opt/android/libpng/pngtrans.c /opt/android/libpng/pngwio.c /opt/android/libpng/pngwrite.c /opt/android/libpng/pngwtran.c /opt/android/libpng/pngwutil.c -I/opt/android/libpng"
msgstr ""
"```text\n"
"Building shared\n"
"libpng\n"
"/opt/android/libpng/png.c /opt/android/libpng/pngerror.c /opt/android/libpng/pngget.c /opt/android/libpng/pngmem.c /opt/android/libpng/pngpread.c /opt/android/libpng/pngread.c /opt/android/libpng/pngrio.c /opt/android/libpng/pngrtran.c /opt/android/libpng/pngrutil.c /opt/android/libpng/pngset.c /opt/android/libpng/pngtrans.c /opt/android/libpng/pngwio.c /opt/android/libpng/pngwrite.c /opt/android/libpng/pngwtran.c /opt/android/libpng/pngwutil.c\n"
"-I/opt/android/libpng\n"
"```"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:120
#, no-wrap
msgid ""
"  -L/opt/emacs/cross/ndk-build -l:libpng_emacs.so\n"
"libpng_emacs.so\n"
"End\n"
msgstr ""
"```text\n"
"  -L/opt/emacs/cross/ndk-build -l:libpng_emacs.so\n"
"libpng_emacs.so\n"
"End\n"
"```\n"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:122
msgid "The output is arranged as follows:"
msgstr "この出力は以下のような配置になっている:"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:126
#, no-wrap
msgid ""
"  - The first line consists of the word ``Building'', followed by\n"
"    either ``shared'', ``static'', or ``executable'', depending on\n"
"    what type of module being built.\n"
msgstr "- 1行目は単語`Building`、その後に`shared`、`static`、`executable`のいずれかが続く(ビルドするモジュールのタイプに依存する)。\n"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:129
#, no-wrap
msgid ""
"  - The second line consists of the name of the module currently being\n"
"    built.\n"
msgstr "- 2行目は現在ビルドしているモジュールの名前。\n"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:132
#, no-wrap
msgid ""
"  - The third line consists of all of the source code files comprising\n"
"    the module.\n"
msgstr "- 3行目はそのモジュールに含まれているすべてのソースコードファイル。\n"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:135
#, no-wrap
msgid ""
"  - The fourth line consists of the text that has to be added to\n"
"    CFLAGS in order to find the includes associated with the module.\n"
msgstr "- 4行目はそのモジュールに関連するインクルードを見つけるために、CFLAGSに追加する必要があるテキスト。\n"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:138
#, no-wrap
msgid ""
"  - The fifth line consists of the text that has to be added to LIBS\n"
"    in order to link with this module and all of its dependencies.\n"
msgstr "- 5行目はそのモジュールと依存関係すべてをリンクするために、LIBSに追加する必要があるテキスト。\n"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:142
#, no-wrap
msgid ""
"  - The sixth line consists of the Make targets (more on this later)\n"
"    that will build the final shared object or library archive of this\n"
"    module, along with all of its dependencies.\n"
msgstr "- 6行目はこのモジュールの最終的な共有オブジェクトまたはライブラリーアーカイブとすべての依存関係をビルドするMakeのtarget(後述)。\n"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:147
#, no-wrap
msgid ""
"  - The seventh line is either empty, or the name of a dependency on\n"
"    the C++ standard library.  This is used to determine whether or\n"
"    not Emacs will include the C++ standard library in the application\n"
"    package.\n"
msgstr "- 7行目は空行、またはC++標準ライブラリー依存関係の名前。これはEmacsのアプリケーションパッケージにC++標準ライブラリーをインクルードするかどうかを判断するために使用される。\n"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:151
msgid "The output from Make is given to an awk script, build-aux/ndk-module-extract.awk.  This is responsible for parsing the that output and filtering out modules other than what is being built:"
msgstr "このMakeからの出力はbuild-aux/ndk-module-extract.awkというawkスクリプトに与えられる。このawkスクリプトには出力を解析して、ビルドするモジュール以外のモジュールをフィルタリングする役目がある:"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:153
#, no-wrap
msgid "  awk -f build-aux/ndk-module-extract.awk MODULE=libpng\n"
msgstr ""
"```shell\n"
"awk -f build-aux/ndk-module-extract.awk MODULE=libpng\n"
"```\n"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:155
msgid "eventually generating this section of shell script:"
msgstr "最終的にはシェルスクリプトの以下のセクションが生成される:"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:165
msgid "module_name=libpng module_kind=shared module_src=\"/opt/android/libpng/png.c /opt/android/libpng/pngerror.c /opt/android/libpng/pngget.c /opt/android/libpng/pngmem.c /opt/android/libpng/pngpread.c /opt/android/libpng/pngread.c /opt/android/libpng/pngrio.c /opt/android/libpng/pngrtran.c /opt/android/libpng/pngrutil.c /opt/android/libpng/pngset.c /opt/android/libpng/pngtrans.c /opt/android/libpng/pngwio.c /opt/android/libpng/pngwrite.c /opt/android/libpng/pngwtran.c /opt/android/libpng/pngwutil.c\" module_includes=\"-I/opt/android/libpng\" module_cflags=\"\" module_ldflags=\" -L/opt/emacs/cross/ndk-build -l:libpng_emacs.so\" module_target=\"libpng_emacs.so\" module_cxx_deps=\"\" module_imports=\"\""
msgstr ""
"```shell\n"
"module_name=libpng\n"
"module_kind=shared\n"
"module_src=\"/opt/android/libpng/png.c /opt/android/libpng/pngerror.c /opt/android/libpng/pngget.c /opt/android/libpng/pngmem.c /opt/android/libpng/pngpread.c /opt/android/libpng/pngread.c /opt/android/libpng/pngrio.c /opt/android/libpng/pngrtran.c /opt/android/libpng/pngrutil.c /opt/android/libpng/pngset.c /opt/android/libpng/pngtrans.c /opt/android/libpng/pngwio.c /opt/android/libpng/pngwrite.c /opt/android/libpng/pngwtran.c /opt/android/libpng/pngwutil.c\"\n"
"module_includes=\"-I/opt/android/libpng\"\n"
"module_cflags=\"\"\n"
"module_ldflags=\"  -L/opt/emacs/cross/ndk-build -l:libpng_emacs.so\"\n"
"module_target=\"libpng_emacs.so\"\n"
"module_cxx_deps=\"\"\n"
"module_imports=\"\"\n"
"```"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:171
msgid "which is then evaluated by `configure'.\t Once the variable `module_name' is set, configure appends the remaining $(module_includes), $(module_cflags) and $(module_ldflags) to the module's CFLAGS and LIBS variables, and appends the list of Makefile targets specified to the variable NDK_BUILD_MODULES."
msgstr "これはその後に`configure`によって評価される。変数`module_name`がセットされたら、configureはモジュールの変数CFLAGSとLIBSに残りの$(module_includes)、$(module_cflags)、$(module_ldflags)を追加、変数NDK_BUILD_MODULESに指定されているMakefileのtargetのリストを追加する。"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:179
msgid "In some cases, an ``Android.mk'' file may chose to import a module defined in ``--with-ndk-path'', but not defined inside its own ``Android.mk'' file.  build-aux/ndk-build-helper.mk defines the `import-module' function to add the modules being imported to a variable, which is then printed out after ``ndk-build-helper.mk'' completes.  For example, libxml2 imports the ``libicucc'' module, which results in the following text being printed:"
msgstr "自身の`Android.mk`ファイルの中では定義されていないにも関わらず、`--with-ndk-path`で定義されているモジュール定義のインポートを`Android.mk`が選択するかもしれない。build-aux/ndk-build-helper.mkはインポートするモジュールを変数に追加するために`import-module`関数を定義する。この変数は`ndk-build-helper.mk`の終了後にプリントされる。たとえば`libicucc`モジュールをインポートするlibxml2では、以下のようなテキストがプリントされるだろう:"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:183
msgid "Building shared libxml2 /home/oldosfan/libxml2/SAX.c /home/oldosfan/libxml2/entities.c /home/oldosfan/libxml2/encoding.c /home/oldosfan/libxml2/error.c /home/oldosfan/libxml2/parserInternals.c /home/oldosfan/libxml2/parser.c /home/oldosfan/libxml2/tree.c /home/oldosfan/libxml2/hash.c /home/oldosfan/libxml2/list.c /home/oldosfan/libxml2/xmlIO.c /home/oldosfan/libxml2/xmlmemory.c /home/oldosfan/libxml2/uri.c /home/oldosfan/libxml2/valid.c /home/oldosfan/libxml2/xlink.c /home/oldosfan/libxml2/debugXML.c /home/oldosfan/libxml2/xpath.c /home/oldosfan/libxml2/xpointer.c /home/oldosfan/libxml2/xinclude.c /home/oldosfan/libxml2/DOCBparser.c /home/oldosfan/libxml2/catalog.c /home/oldosfan/libxml2/globals.c /home/oldosfan/libxml2/threads.c /home/oldosfan/libxml2/c14n.c /home/oldosfan/libxml2/xmlstring.c /home/oldosfan/libxml2/buf.c /home/oldosfan/libxml2/xmlregexp.c /home/oldosfan/libxml2/xmlschemas.c /home/oldosfan/libxml2/xmlschemastypes.c /home/oldosfan/libxml2/xmlunicode.c /home/oldosfan/libxml2/xmlreader.c /home/oldosfan/libxml2/relaxng.c /home/oldosfan/libxml2/dict.c /home/oldosfan/libxml2/SAX2.c /home/oldosfan/libxml2/xmlwriter.c /home/oldosfan/libxml2/legacy.c /home/oldosfan/libxml2/chvalid.c /home/oldosfan/libxml2/pattern.c /home/oldosfan/libxml2/xmlsave.c /home/oldosfan/libxml2/xmlmodule.c /home/oldosfan/libxml2/schematron.c /home/oldosfan/libxml2/SAX.c /home/oldosfan/libxml2/entities.c /home/oldosfan/libxml2/encoding.c /home/oldosfan/libxml2/error.c /home/oldosfan/libxml2/parserInternals.c /home/oldosfan/libxml2/parser.c /home/oldosfan/libxml2/tree.c /home/oldosfan/libxml2/hash.c /home/oldosfan/libxml2/list.c /home/oldosfan/libxml2/xmlIO.c /home/oldosfan/libxml2/xmlmemory.c /home/oldosfan/libxml2/uri.c /home/oldosfan/libxml2/valid.c /home/oldosfan/libxml2/xlink.c /home/oldosfan/libxml2/debugXML.c /home/oldosfan/libxml2/xpath.c /home/oldosfan/libxml2/xpointer.c /home/oldosfan/libxml2/xinclude.c /home/oldosfan/libxml2/DOCBparser.c /home/oldosfan/libxml2/catalog.c /home/oldosfan/libxml2/globals.c /home/oldosfan/libxml2/threads.c /home/oldosfan/libxml2/c14n.c /home/oldosfan/libxml2/xmlstring.c /home/oldosfan/libxml2/buf.c /home/oldosfan/libxml2/xmlregexp.c /home/oldosfan/libxml2/xmlschemas.c /home/oldosfan/libxml2/xmlschemastypes.c /home/oldosfan/libxml2/xmlunicode.c /home/oldosfan/libxml2/xmlreader.c /home/oldosfan/libxml2/relaxng.c /home/oldosfan/libxml2/dict.c /home/oldosfan/libxml2/SAX2.c /home/oldosfan/libxml2/xmlwriter.c /home/oldosfan/libxml2/legacy.c /home/oldosfan/libxml2/chvalid.c /home/oldosfan/libxml2/pattern.c /home/oldosfan/libxml2/xmlsave.c /home/oldosfan/libxml2/xmlmodule.c /home/oldosfan/libxml2/schematron.c"
msgstr ""
"```text\n"
"Building shared\n"
"libxml2\n"
"/home/oldosfan/libxml2/SAX.c /home/oldosfan/libxml2/entities.c /home/oldosfan/libxml2/encoding.c /home/oldosfan/libxml2/error.c /home/oldosfan/libxml2/parserInternals.c /home/oldosfan/libxml2/parser.c /home/oldosfan/libxml2/tree.c /home/oldosfan/libxml2/hash.c /home/oldosfan/libxml2/list.c /home/oldosfan/libxml2/xmlIO.c /home/oldosfan/libxml2/xmlmemory.c /home/oldosfan/libxml2/uri.c /home/oldosfan/libxml2/valid.c /home/oldosfan/libxml2/xlink.c /home/oldosfan/libxml2/debugXML.c /home/oldosfan/libxml2/xpath.c /home/oldosfan/libxml2/xpointer.c /home/oldosfan/libxml2/xinclude.c /home/oldosfan/libxml2/DOCBparser.c /home/oldosfan/libxml2/catalog.c /home/oldosfan/libxml2/globals.c /home/oldosfan/libxml2/threads.c /home/oldosfan/libxml2/c14n.c /home/oldosfan/libxml2/xmlstring.c /home/oldosfan/libxml2/buf.c /home/oldosfan/libxml2/xmlregexp.c /home/oldosfan/libxml2/xmlschemas.c /home/oldosfan/libxml2/xmlschemastypes.c /home/oldosfan/libxml2/xmlunicode.c /home/oldosfan/libxml2/xmlreader.c /home/oldosfan/libxml2/relaxng.c /home/oldosfan/libxml2/dict.c /home/oldosfan/libxml2/SAX2.c /home/oldosfan/libxml2/xmlwriter.c /home/oldosfan/libxml2/legacy.c /home/oldosfan/libxml2/chvalid.c /home/oldosfan/libxml2/pattern.c /home/oldosfan/libxml2/xmlsave.c /home/oldosfan/libxml2/xmlmodule.c /home/oldosfan/libxml2/schematron.c /home/oldosfan/libxml2/SAX.c /home/oldosfan/libxml2/entities.c /home/oldosfan/libxml2/encoding.c /home/oldosfan/libxml2/error.c /home/oldosfan/libxml2/parserInternals.c /home/oldosfan/libxml2/parser.c /home/oldosfan/libxml2/tree.c /home/oldosfan/libxml2/hash.c /home/oldosfan/libxml2/list.c /home/oldosfan/libxml2/xmlIO.c /home/oldosfan/libxml2/xmlmemory.c /home/oldosfan/libxml2/uri.c /home/oldosfan/libxml2/valid.c /home/oldosfan/libxml2/xlink.c /home/oldosfan/libxml2/debugXML.c /home/oldosfan/libxml2/xpath.c /home/oldosfan/libxml2/xpointer.c /home/oldosfan/libxml2/xinclude.c /home/oldosfan/libxml2/DOCBparser.c /home/oldosfan/libxml2/catalog.c /home/oldosfan/libxml2/globals.c /home/oldosfan/libxml2/threads.c /home/oldosfan/libxml2/c14n.c /home/oldosfan/libxml2/xmlstring.c /home/oldosfan/libxml2/buf.c /home/oldosfan/libxml2/xmlregexp.c /home/oldosfan/libxml2/xmlschemas.c /home/oldosfan/libxml2/xmlschemastypes.c /home/oldosfan/libxml2/xmlunicode.c /home/oldosfan/libxml2/xmlreader.c /home/oldosfan/libxml2/relaxng.c /home/oldosfan/libxml2/dict.c /home/oldosfan/libxml2/SAX2.c /home/oldosfan/libxml2/xmlwriter.c /home/oldosfan/libxml2/legacy.c /home/oldosfan/libxml2/chvalid.c /home/oldosfan/libxml2/pattern.c /home/oldosfan/libxml2/xmlsave.c /home/oldosfan/libxml2/xmlmodule.c /home/oldosfan/libxml2/schematron.c\n"
"```"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:191
#, no-wrap
msgid ""
"  -L/home/oldosfan/emacs-dev/emacs-android/cross/ndk-build -l:libxml2_emacs.so -l:libicuuc_emacs.so\n"
"libxml2_emacs.so libicuuc_emacs.so\n"
"End\n"
"Start Imports\n"
"libicuuc\n"
"End Imports\n"
msgstr ""
"```text\n"
"  -L/home/oldosfan/emacs-dev/emacs-android/cross/ndk-build -l:libxml2_emacs.so -l:libicuuc_emacs.so\n"
"libxml2_emacs.so libicuuc_emacs.so\n"
"End\n"
"Start Imports\n"
"libicuuc\n"
"End Imports\n"
"```\n"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:195
msgid "Upon encountering the ``Start Imports'' section, build-aux/ndk-module-extract.awk collects all imports until it encounters the line ``End Imports'', at which point it prints:"
msgstr "`Start Imports`セクションに到達すると、build-aux/ndk-module-extract.awkは`End Imports`がある行まですべてのインポートを収集する。この時点では以下のようにプリントされている筈だ:"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:197
msgid "module_imports=\"libicuuc\""
msgstr ""
"```text\n"
"module_imports=\"libicuuc\"\n"
"```"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:202
msgid "Then, if the list of imports is not empty, ndk_CHECK_MODULES additionally calls itself for each import before appending the module's own ``Android.mk'', ensuring that the module's imported dependencies are included by $ndk_DIR/Makefile before itself."
msgstr "インポートのリストが空でなければ、ndk_CHECK_MODULESは自身の`Android.mk`を追加する前に、追加でインポートそれぞれにたいして自分を呼び出す。$ndk_DIR/Makefileにそのモジュールをインクルードする前に、モジュールにインポートされている依存関係を確実にインクルードするためである。"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:205
msgid "Finally, immediately before generating src/Makefile.android, configure expands:"
msgstr "そして最後、src/Makefile.androidの生成直前にconfigureが以下を展開する:"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:207
#, no-wrap
msgid "  ndk_CONFIG_FILES\n"
msgstr ""
"```text\n"
"ndk_CONFIG_FILES\n"
"```\n"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:209
msgid "to generate $ndk_DIR/Makefile and $ndk_DIR/ndk-build.mk."
msgstr "これにより$ndk_DIR/Makefileと$ndk_DIR/ndk-build.mkが生成される。"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:214
msgid "Now, the $ndk_DIR directory is set up to build all modules upon which depends, and $ndk_DIR/ndk-build.mk includes a list of files required to link Emacs, along with the rules to chdir into $ndk_DIR in order to build them."
msgstr "これで依存するすべてのモジュールをビルドするように$ndk_DIRディレクトリーがセットアップされて、モジュールをビルドするために$ndk_DIRにchdirするルールとともにEmacsをリンクするために必要なファイルのリストが$ndk_DIR/ndk-build.mkにインクルードされた。"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:218
msgid "$ndk_DIR/ndk-build.mk is included by cross/src/Makefile (Makefile.android) and java/Makefile.  It defines three different variables:"
msgstr "$ndk_DIR/ndk-build.mkはcross/src/Makefile(Makefile.android)およびjava/Makefileにインクルードされる。これは3つの異なり変数を定義している:"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:224
#, no-wrap
msgid ""
"  NDK_BUILD_MODULES\tthe file names of all modules to be built.\n"
"  NDK_BUILD_STATIC\tabsolute names of all library archives\n"
"\t\t\tto be built.\n"
"  NDK_BUILD_SHARED\tabsolute names of all shared libraries to\n"
"\t\t\tbe built.\n"
msgstr ""
"NDK_BUILD_MODULES ビルドするすべてのモジュールのファイル名\n"
"NDK_BUILD_STATIC ビルドするすべてのライブラリーアーカイブの絶対ファイル名\n"
"NDK_BUILD_SHARED ビルドするすべての共有ライブラリーの絶対ファイル名\n"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:227
msgid "and then proceeds to define rules to build each of the modules in $(NDK_BUILD_MODULES)."
msgstr "次は$(NDK_BUILD_MODULES)で定義されているモジュールそれぞれをビルドするルールの定義に進む。"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:230
msgid "cross/src/Makefile arranges to have all dependencies of Emacs not already built built before linking ``libemacs.so'' with them."
msgstr "`libemacs.so`と依存関係をリンクする前に、まだビルドされていないEmacsの依存関係をビルドするようにcross/src/Makefileを手配する。"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:235
msgid "java/Makefile additionally arranges to have all shared object dependencies built before the application package is built, which is normally redundant because they should have already been built before linking ``libemacs.so''."
msgstr "さらにアプリケーションパッケージのビルド前にすべての共有オブジェクト依存関係がビルドされるようにjava/Makefileを手配する。これらの依存関係は`libemacs.so`のリンク前にビルドされている筈なので、通常は冗長である。"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:242
msgid "Building the modules is performed through $ndk_DIR/Makefile, which contains the actual implementation of the ``ndk-build'' build system.  First, it defines certain variables constant within the ``ndk-build'' build system, such as the files included by ``Android.mk'' to build shared or static libraries, and CLEAR_VARS.  The most important of these are:"
msgstr "モジュールのビルドは、`ndk-build``ビルドシステムの実際の実装を含む$ndk_DIR/Makefileを介して実行される。これはまず`ndk-build`ビルドシステム内の特定の定数(共有ライブラリーや静的ライブラリーをビルドするために`Android.mk`にインクルードされるファイルやCLEAR_VARSなど)を定義する。これらの定数でもっとも重要な定数は:"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:249
#, no-wrap
msgid ""
"  CLEAR_VARS\t\t\tcross/ndk-build/ndk-clear-vars.mk\n"
"  BUILD_EXECUTABLE\t\tcross/ndk-build/ndk-build-executable.mk\n"
"  BUILD_SHARED_LIBRARY\t\tcross/ndk-build/ndk-build-shared-library.mk\n"
"  BUILD_STATIC_LIBRARY\t\tcross/ndk-build/ndk-build-static-library.mk\n"
"  PREBUILT_SHARED_LIBRARY\tcross/ndk-build/ndk-prebuilt-shared-library.mk\n"
"  PREBUILT_STATIC_LIBRARY\tcross/ndk-build/ndk-prebuilt-static-library.mk\n"
msgstr ""
"CLEAR_VARS              cross/ndk-build/ndk-clear-vars.mk\n"
"BUILD_EXECUTABLE        cross/ndk-build/ndk-build-executable.mk\n"
"BUILD_SHARED_LIBRARY    cross/ndk-build/ndk-build-shared-library.mk\n"
"BUILD_STATIC_LIBRARY    cross/ndk-build/ndk-build-static-library.mk\n"
"PREBUILT_SHARED_LIBRARY cross/ndk-build/ndk-prebuilt-shared-library.mk\n"
"PREBUILT_STATIC_LIBRARY\t cross/ndk-build/ndk-prebuilt-static-library.mk\n"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:255
msgid "Then, it loads each Emacs dependency's ``Android.mk'' file.  For each module defined there, ``Android.mk'' includes $(CLEAR_VARS) to unset all variables specific to each module, and then includes $(BUILD_SHARED_LIBRARY) or $(BUILD_STATIC_LIBRARY) for each shared or static library module."
msgstr "次にEmacsの依存関係それぞれにたいして`Android.mk`ファイルをロードする。`Android.mk`はそこで定義されているモジュールごとに各モジュールに固有なすべての変数の設定を解除する$(CLEAR_VARS)、共有ライブラリーあるいは静的ライブラリーのモジュールそれぞれについては$(BUILD_SHARED_LIBRARY)あるいは$(BUILD_STATIC_LIBRARY)をインクルードする。"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:259
msgid "This results in cross/ndk-build/ndk-build-shared-library.mk or cross/ndk-build/ndk-build-static-library being included, just like the Makefiles in build-aux were inside the configure script."
msgstr "これによりconfigureスクリプト内部にあるbuild-auxのMakefileと同じように、cross/ndk-build/ndk-build-shared-library.mkやcross/ndk-build/ndk-build-static-libraryがインクルードされるのだ。"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:265
msgid "Each one of those two scripts then defines rules to build all of the object files associated with the module, and then link or archive them.  The name under which the module is linked is the same as the Make target found on the sixth line of output from build-aux/ndk-build-helper.mk."
msgstr "これら2つのスクリプトはそれぞれモジュールに関連付けられたすべてのオブジェクトファイルをビルドするためのルールを定義して、それらのリンクあるいはアーカイブを行う。モジュールはbuild-aux/ndk-build-helper.mk出力の6行目にあるMakeのtargetと同じ名前にリンクされる。"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:270
msgid "In doing so, they both include the file ndk-resolve.mk.  ndk-resolve.mk is expected to recursively add all of the exported CFLAGS and includes of any dependencies to the compiler and linker command lines for the module being built."
msgstr "これを行う間にどちらもファイルndk-resolve.mkをインクルードする。ndk-resolve.mkにはビルドするモジュールのコンパイラーおよびリンカーのコマンドラインにエクスポートされたすべてのCFLAGSを再帰的に追加すること、およびすべての依存関係をインクルードする役目がある。"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:276
msgid "When building a shared library module, ndk-resolve.mk is also expected to define the variables NDK_LOCAL_A_NAMES_$(LOCAL_MODULE) and NDK_WHOLE_A_NAMES_$(LOCAL_MODULE), containing all static library dependencies' archive files.  They are to be linked in to the resulting shared object file."
msgstr "共有ライブラリーモジュールをビルドする際には、すべての静的ライブラリー依存関係のアーカイブファイルを含んだ変数NDK_LOCAL_A_NAMES_$(LOCAL_MODULE)およびNDK_WHOLE_A_NAMES_$(LOCAL_MODULE)の定義もndk-resolve.mkの役目となる。これらのアーカイブファイルは共有オブジェクトファイルにリンクされることになる。"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:280
msgid "This is done by including cross/ndk-build/ndk-resolve.mk each time a shared or static library module is going to be built.  How is this done?"
msgstr "これらの処理は共有ライブラリーあるいは静的ライブラリーのモジュールがビルドされる度に毎回cross/ndk-build/ndk-resolve.mkをインクルードすることによって行われる。ではどうやって?"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:284
msgid "First, ndk-resolve.mk saves the LOCAL_PATH, LOCAL_STATIC_LIBRARIES, LOCAL_SHARED_LIBRARIES, LOCAL_EXPORT_CFLAGS and LOCAL_EXPORT_C_INCLUDES from the module."
msgstr "まずndk-resolve.mkはモジュールのLOCAL_PATH、LOCAL_STATIC_LIBRARIES、LOCAL_SHARED_LIBRARIES、LOCAL_EXPORT_CFLAGS、LOCAL_EXPORT_C_INCLUDESを保存する。"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:288
msgid "Next, ndk-resolve loops through the dependencies the module has specified, appending its CFLAGS and includes to the command line for the current module."
msgstr "次にndk-resolveはモジュールが指定した依存関係をループして、依存関係のCFLAGSとインクルードを、カレントモジュールのコマンドラインに追加する。"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:291
msgid "Then, that process is repeated for each such dependency which has not already been resolved, until all dependencies have been resolved."
msgstr "その後はすべての依存関係が解決されるまで、未解決の依存関係それぞれにたいしてこのプロセスを繰り返すのだ。"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:296
msgid "libpng is a very simple module, providing only a single shared object module.\t This module is named libpng_emacs.so and is eventually built and packaged into the library directory of the Emacs application package.  Now, let us look at a more complex module, libwebp:"
msgstr "libpngたただ1つの共有ライブラリーモジュールを提供する非常にシンプルなモジュールだ。このモジュールの名前はlibpng_emacs.so、最終的にはEmacsアプリケーションパッケージのライブラリーディレクトリーにビルドされてパッケージングされることになる。今度はもっと複雑なモジュールlibwebpを見てみよう:"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:302
msgid "When built with libwebp, Emacs depends on a single library, libwebpdemux.  This library is named ``libwebpdemux'' on Unix systems, and that is the name by which it is found with pkg-config."
msgstr "libwebpとともにビルドする場合には、Emacsは単一のライブラリーlibwebpdemuxに依存することになる。Unixシステムではこのライブラリーの名前は`libwebpdemux`であり、pkg-configで検索するのもこの名前だ。"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:307
msgid "However, the library's module is only named ``webpdemux'' on Android.  When ndk_CHECK_MODULES begins to look for a module, it first tries to see if its name is found in the variable `ndk_package_map', which was set inside ndk_INIT.  In this case, it finds the following word:"
msgstr "しかしAndroidではライブラリーのモジュール名は`webpdemux`だけである。ndk_CHECK_MODULESがモジュールの検索を開始する際には、まずこの名前が変数`ndk_package_map`(ndk_INIT内部でセットされる)にあるか確認する。この場合には以下の単語が見つかるだろう:"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:309
#, no-wrap
msgid "  libwebpdemux:webpdemux\n"
msgstr ""
"```text\n"
"libwebpdemux:webpdemux\n"
"```\n"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:311
msgid "and immediately replaces ``libwebpdemux'' with ``webpdemux''."
msgstr "そして`libwebpdemux`は即`webpdemux`に置き換えられる。"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:315
msgid "Then, it locates the ``Android.mk'' file containing a static library module named webpdemux and gives the output from build-aux/ndk-build-helper.mk to the awk script, resulting in:"
msgstr "webpdemuxという静的ライブラリーモジュールを含んだ`Android.mk`ファイルを探して、build-aux/ndk-build-helper.mkの出力をawkスクリプトに与える。結果は以下のようになるだろう:"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:323
msgid "module_name=webpdemux module_kind=static module_src=\"/opt/android/webp/src/demux/anim_decode.c /opt/android/webp/src/demux/demux.c\" module_includes=\"-I/opt/android/webp/src\" module_cflags=\"\" module_ldflags=\" cross/ndk-build/libwebpdemux.a cross/ndk-build/libwebp.a cross/ndk-build/libwebpdecoder_static.a \" module_target=\"libwebpdemux.a libwebp.a libwebpdecoder_static.a\""
msgstr ""
"```make\n"
"module_name=webpdemux\n"
"module_kind=static\n"
"module_src=\"/opt/android/webp/src/demux/anim_decode.c /opt/android/webp/src/demux/demux.c\"\n"
"module_includes=\"-I/opt/android/webp/src\"\n"
"module_cflags=\"\"\n"
"module_ldflags=\" cross/ndk-build/libwebpdemux.a cross/ndk-build/libwebp.a cross/ndk-build/libwebpdecoder_static.a \"\n"
"module_target=\"libwebpdemux.a libwebp.a libwebpdecoder_static.a\"\n"
"```"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:333
msgid "The attentive reader will notice that in addition to the ``libwebpdemux.a'' archive associated with the ``webpdemux'' library, Emacs has been made to link with two additional libraries.  This is because the ``webpdemux'' module specifies a dependency on the ``webp'' module (defined in the same Android.mk).  build-aux/ndk-build-helper.mk resolved that dependency, noticing that it in turn specified another dependency on ``webpdecoder_static'', which in turn was added to the linker command line and list of targets to build."
msgstr "注意深い読者は``webpdemux''ライブラリーに関連付けられた``libwebpdemux.a''アーカイブに加えて、Emacsが追加で2つのライブラリーとリンクすることになっていることに気づいたかもしれない。これは`webpdemux`モジュールが`webp`モジュールへの依存関係を指定しているためだ(同じAndroid.mk内で定義されている)。build-aux/ndk-build-helper.mkがこの依存関係を解決して、`webpdecoder_static`に別の依存関係が指定されていることに気づき、リンカーのコマンドラインとビルドするtargetのリストに追加したのだ。"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:337
msgid "As a result, all three dependencies will be built and linked to Emacs, instead of just the single ``webpdemux'' dependency that was specified."
msgstr "そのようにして指定されたたった1つの依存関係`webpdemux`ではなく、3つの依存関係すべてがEmacsにリンクされる。"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:341
msgid "This file is part of GNU Emacs."
msgstr "This file is part of GNU Emacs."

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:346
msgid "GNU Emacs is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version."
msgstr "GNU Emacs is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version."

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:351
msgid "GNU Emacs is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details."
msgstr "GNU Emacs is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details."

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:353
msgid "You should have received a copy of the GNU General Public License along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>."
msgstr "You should have received a copy of the GNU General Public License along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>."
