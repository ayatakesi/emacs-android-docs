# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2024-11-06 23:52+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:2
msgid "NDK BUILD SYSTEM IMPLEMENTATION"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:5
msgid "Copyright (C) 2023-2024 Free Software Foundation, Inc.  See the end of the file for license conditions."
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:9
msgid "Emacs implements ndk-build itself, because the version that comes with the Android NDK is not easy to use from another Makefile, and keeps accumulating incompatible changes."
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:11
msgid "The Emacs implementation of ndk-build consists of one m4 file:"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:13
#, no-wrap
msgid "  m4/ndk-build.m4\n"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:15
msgid "four Makefiles in build-aux, run during configure:"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:20
#, no-wrap
msgid ""
"  build-aux/ndk-build-helper-1.mk\n"
"  build-aux/ndk-build-helper-2.mk\n"
"  build-aux/ndk-build-helper-3.mk\n"
"  build-aux/ndk-build-helper.mk\n"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:22
msgid "one awk script in build-awx, run during configure:"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:24
#, no-wrap
msgid "  build-aux/ndk-module-extract.awk\n"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:26
msgid "seven Makefiles in cross/ndk-build,"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:34
#, no-wrap
msgid ""
"  cross/ndk-build/ndk-build-shared-library.mk\n"
"  cross/ndk-build/ndk-build-static-library.mk\n"
"  cross/ndk-build/ndk-build-executable.mk\n"
"  cross/ndk-build/ndk-clear-vars.mk\n"
"  cross/ndk-build/ndk-prebuilt-shared-library.mk\n"
"  cross/ndk-build/ndk-prebuilt-static-library.mk\n"
"  cross/ndk-build/ndk-resolve.mk\n"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:37
msgid "and finally, two more Makefiles in cross/ndk-build, generated by configure:"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:40
#, no-wrap
msgid ""
"  cross/ndk-build/Makefile     (generated from cross/ndk-build/Makefile.in)\n"
"  cross/ndk-build/ndk-build.mk (generated from cross/ndk-build/ndk-build.mk.in)\n"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:45
msgid "m4/ndk-build.m4 is a collection of macros which are used by the configure script to set up the ndk-build system, look for modules, add the appropriate options to LIBS and CFLAGS, and generate the Makefiles necessary to build the rest of Emacs."
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:49
msgid "Immediately after determining the list of directories in which to look for ``Android.mk'' files, the version and type of Android system being built for, configure calls:"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:51
#, no-wrap
msgid "  ndk_INIT([$android_abi], [$ANDROID_SDK], [cross/ndk-build])\n"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:57
msgid "This expands to a sequence of shell script that enumerates all of the Android.mk files specified in \"$with_ndk_path\", sets up some shell functions used by the rest of the ndk-build code run by the configure script, and teaches the ndk-build system that the Makefiles to be generated are found in the directory \"cross/ndk-build/Makefile\"."
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:62
msgid "When configure is cross-compiling for Android, the macro EMACS_CHECK_MODULES will expand to the macro ndk_CHECK_MODULES, instead of pkg-config.m4's PKG_CHECK_MODULES.  Thus, the following code:"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:64
#, no-wrap
msgid "    EMACS_CHECK_MODULES([PNG], [libpng >= 1.0.0])\n"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:66
msgid "will actually expand to:"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:69
#, no-wrap
msgid ""
"    ndk_CHECK_MODULES([PNG], [libpng >= 1.0.0], [HAVE_PNG=yes],\n"
"\t\t      [HAVE_PNG=no])\n"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:71
msgid "which in turn expands to a sequence shell script that first invokes:"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:73
#, no-wrap
msgid "    make -f build-aux/ndk-build-helper.mk\n"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:76
msgid "for each ``Android.mk'' file found by ndk_INIT, with the following variables given to Make:"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:83
#, no-wrap
msgid ""
"    EMACS_SRCDIR=.  # the source directory (in which configure is running)\n"
"    BUILD_AUXDIR=$ndk_AUX_DIR # the build-aux directory\n"
"    EMACS_ABI=$ndk_ABI # this is the $android_abi given to ndk_INIT\n"
"    ANDROID_MAKEFILE=\"/opt/android/libpng/Android.mk\"\n"
"    ANDROID_MODULE_DIRECTORY=\"/opt/android/libpng\"\n"
"    NDK_BUILD_DIR=\"$ndk_DIR\" # this is the directory given as to ndk_INIT\n"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:90
msgid "build-aux/ndk-build-helper.mk will then evaluate the contents $(ANDROID_MAKEFILE), the ``Android.mk'' file, for the first time.  The purpose of this evaluation is to establish a list of packages (or modules) provided by the ``Android.mk'' file, and the corresponding Makefile targets and compiler and linker flags required to build and link to those targets."
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:94
msgid "Before doing so, build-aux/ndk-build-helper.mk will define several variables and functions required by all ``Android.mk'' files.  The most important of these are:"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:100
#, no-wrap
msgid ""
"  my-dir # the directory containing the Android.mk file.\n"
"  BUILD_SHARED_LIBRARY # build-aux/ndk-build-helper-1.mk\n"
"  BUILD_STATIC_LIBRARY # build-aux/ndk-build-helper-2.mk\n"
"  BUILD_EXECUTABLE # build-aux/ndk-build-helper-3.mk\n"
"  CLEAR_VARS # build-aux/ndk-build-helper-4.mk\n"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:106
msgid "Then, ``Android.mk'' will include $(CLEAN_VARS), possibly other ``Android.mk'' files, (to clear variables previously set), set several variables describing each module to the ndk-build system, and include one of $(BUILD_SHARED_LIBRARY), $(BUILD_STATIC_LIBRARY) and $(BUILD_EXECUTABLE)."
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:111
msgid "Each one of those three scripts will then read from the variables set by ``Android.mk'', resolve dependencies, and print out some text describing the module to Emacs.\t For example, the shared library module \"libpng\" results in the following text being printed:"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:116
msgid "Building shared libpng /opt/android/libpng/png.c /opt/android/libpng/pngerror.c /opt/android/libpng/pngget.c /opt/android/libpng/pngmem.c /opt/android/libpng/pngpread.c /opt/android/libpng/pngread.c /opt/android/libpng/pngrio.c /opt/android/libpng/pngrtran.c /opt/android/libpng/pngrutil.c /opt/android/libpng/pngset.c /opt/android/libpng/pngtrans.c /opt/android/libpng/pngwio.c /opt/android/libpng/pngwrite.c /opt/android/libpng/pngwtran.c /opt/android/libpng/pngwutil.c -I/opt/android/libpng"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:120
#, no-wrap
msgid ""
"  -L/opt/emacs/cross/ndk-build -l:libpng_emacs.so\n"
"libpng_emacs.so\n"
"End\n"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:122
msgid "The output is arranged as follows:"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:126
#, no-wrap
msgid ""
"  - The first line consists of the word ``Building'', followed by\n"
"    either ``shared'', ``static'', or ``executable'', depending on\n"
"    what type of module being built.\n"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:129
#, no-wrap
msgid ""
"  - The second line consists of the name of the module currently being\n"
"    built.\n"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:132
#, no-wrap
msgid ""
"  - The third line consists of all of the source code files comprising\n"
"    the module.\n"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:135
#, no-wrap
msgid ""
"  - The fourth line consists of the text that has to be added to\n"
"    CFLAGS in order to find the includes associated with the module.\n"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:138
#, no-wrap
msgid ""
"  - The fifth line consists of the text that has to be added to LIBS\n"
"    in order to link with this module and all of its dependencies.\n"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:142
#, no-wrap
msgid ""
"  - The sixth line consists of the Make targets (more on this later)\n"
"    that will build the final shared object or library archive of this\n"
"    module, along with all of its dependencies.\n"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:147
#, no-wrap
msgid ""
"  - The seventh line is either empty, or the name of a dependency on\n"
"    the C++ standard library.  This is used to determine whether or\n"
"    not Emacs will include the C++ standard library in the application\n"
"    package.\n"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:151
msgid "The output from Make is given to an awk script, build-aux/ndk-module-extract.awk.  This is responsible for parsing the that output and filtering out modules other than what is being built:"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:153
#, no-wrap
msgid "  awk -f build-aux/ndk-module-extract.awk MODULE=libpng\n"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:155
msgid "eventually generating this section of shell script:"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:165
msgid "module_name=libpng module_kind=shared module_src=\"/opt/android/libpng/png.c /opt/android/libpng/pngerror.c /opt/android/libpng/pngget.c /opt/android/libpng/pngmem.c /opt/android/libpng/pngpread.c /opt/android/libpng/pngread.c /opt/android/libpng/pngrio.c /opt/android/libpng/pngrtran.c /opt/android/libpng/pngrutil.c /opt/android/libpng/pngset.c /opt/android/libpng/pngtrans.c /opt/android/libpng/pngwio.c /opt/android/libpng/pngwrite.c /opt/android/libpng/pngwtran.c /opt/android/libpng/pngwutil.c\" module_includes=\"-I/opt/android/libpng\" module_cflags=\"\" module_ldflags=\" -L/opt/emacs/cross/ndk-build -l:libpng_emacs.so\" module_target=\"libpng_emacs.so\" module_cxx_deps=\"\" module_imports=\"\""
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:171
msgid "which is then evaluated by `configure'.\t Once the variable `module_name' is set, configure appends the remaining $(module_includes), $(module_cflags) and $(module_ldflags) to the module's CFLAGS and LIBS variables, and appends the list of Makefile targets specified to the variable NDK_BUILD_MODULES."
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:179
msgid "In some cases, an ``Android.mk'' file may chose to import a module defined in ``--with-ndk-path'', but not defined inside its own ``Android.mk'' file.  build-aux/ndk-build-helper.mk defines the `import-module' function to add the modules being imported to a variable, which is then printed out after ``ndk-build-helper.mk'' completes.  For example, libxml2 imports the ``libicucc'' module, which results in the following text being printed:"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:183
msgid "Building shared libxml2 /home/oldosfan/libxml2/SAX.c /home/oldosfan/libxml2/entities.c /home/oldosfan/libxml2/encoding.c /home/oldosfan/libxml2/error.c /home/oldosfan/libxml2/parserInternals.c /home/oldosfan/libxml2/parser.c /home/oldosfan/libxml2/tree.c /home/oldosfan/libxml2/hash.c /home/oldosfan/libxml2/list.c /home/oldosfan/libxml2/xmlIO.c /home/oldosfan/libxml2/xmlmemory.c /home/oldosfan/libxml2/uri.c /home/oldosfan/libxml2/valid.c /home/oldosfan/libxml2/xlink.c /home/oldosfan/libxml2/debugXML.c /home/oldosfan/libxml2/xpath.c /home/oldosfan/libxml2/xpointer.c /home/oldosfan/libxml2/xinclude.c /home/oldosfan/libxml2/DOCBparser.c /home/oldosfan/libxml2/catalog.c /home/oldosfan/libxml2/globals.c /home/oldosfan/libxml2/threads.c /home/oldosfan/libxml2/c14n.c /home/oldosfan/libxml2/xmlstring.c /home/oldosfan/libxml2/buf.c /home/oldosfan/libxml2/xmlregexp.c /home/oldosfan/libxml2/xmlschemas.c /home/oldosfan/libxml2/xmlschemastypes.c /home/oldosfan/libxml2/xmlunicode.c /home/oldosfan/libxml2/xmlreader.c /home/oldosfan/libxml2/relaxng.c /home/oldosfan/libxml2/dict.c /home/oldosfan/libxml2/SAX2.c /home/oldosfan/libxml2/xmlwriter.c /home/oldosfan/libxml2/legacy.c /home/oldosfan/libxml2/chvalid.c /home/oldosfan/libxml2/pattern.c /home/oldosfan/libxml2/xmlsave.c /home/oldosfan/libxml2/xmlmodule.c /home/oldosfan/libxml2/schematron.c /home/oldosfan/libxml2/SAX.c /home/oldosfan/libxml2/entities.c /home/oldosfan/libxml2/encoding.c /home/oldosfan/libxml2/error.c /home/oldosfan/libxml2/parserInternals.c /home/oldosfan/libxml2/parser.c /home/oldosfan/libxml2/tree.c /home/oldosfan/libxml2/hash.c /home/oldosfan/libxml2/list.c /home/oldosfan/libxml2/xmlIO.c /home/oldosfan/libxml2/xmlmemory.c /home/oldosfan/libxml2/uri.c /home/oldosfan/libxml2/valid.c /home/oldosfan/libxml2/xlink.c /home/oldosfan/libxml2/debugXML.c /home/oldosfan/libxml2/xpath.c /home/oldosfan/libxml2/xpointer.c /home/oldosfan/libxml2/xinclude.c /home/oldosfan/libxml2/DOCBparser.c /home/oldosfan/libxml2/catalog.c /home/oldosfan/libxml2/globals.c /home/oldosfan/libxml2/threads.c /home/oldosfan/libxml2/c14n.c /home/oldosfan/libxml2/xmlstring.c /home/oldosfan/libxml2/buf.c /home/oldosfan/libxml2/xmlregexp.c /home/oldosfan/libxml2/xmlschemas.c /home/oldosfan/libxml2/xmlschemastypes.c /home/oldosfan/libxml2/xmlunicode.c /home/oldosfan/libxml2/xmlreader.c /home/oldosfan/libxml2/relaxng.c /home/oldosfan/libxml2/dict.c /home/oldosfan/libxml2/SAX2.c /home/oldosfan/libxml2/xmlwriter.c /home/oldosfan/libxml2/legacy.c /home/oldosfan/libxml2/chvalid.c /home/oldosfan/libxml2/pattern.c /home/oldosfan/libxml2/xmlsave.c /home/oldosfan/libxml2/xmlmodule.c /home/oldosfan/libxml2/schematron.c"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:191
#, no-wrap
msgid ""
"  -L/home/oldosfan/emacs-dev/emacs-android/cross/ndk-build -l:libxml2_emacs.so -l:libicuuc_emacs.so\n"
"libxml2_emacs.so libicuuc_emacs.so\n"
"End\n"
"Start Imports\n"
"libicuuc\n"
"End Imports\n"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:195
msgid "Upon encountering the ``Start Imports'' section, build-aux/ndk-module-extract.awk collects all imports until it encounters the line ``End Imports'', at which point it prints:"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:197
msgid "module_imports=\"libicuuc\""
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:202
msgid "Then, if the list of imports is not empty, ndk_CHECK_MODULES additionally calls itself for each import before appending the module's own ``Android.mk'', ensuring that the module's imported dependencies are included by $ndk_DIR/Makefile before itself."
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:205
msgid "Finally, immediately before generating src/Makefile.android, configure expands:"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:207
#, no-wrap
msgid "  ndk_CONFIG_FILES\n"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:209
msgid "to generate $ndk_DIR/Makefile and $ndk_DIR/ndk-build.mk."
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:214
msgid "Now, the $ndk_DIR directory is set up to build all modules upon which depends, and $ndk_DIR/ndk-build.mk includes a list of files required to link Emacs, along with the rules to chdir into $ndk_DIR in order to build them."
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:218
msgid "$ndk_DIR/ndk-build.mk is included by cross/src/Makefile (Makefile.android) and java/Makefile.  It defines three different variables:"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:224
#, no-wrap
msgid ""
"  NDK_BUILD_MODULES\tthe file names of all modules to be built.\n"
"  NDK_BUILD_STATIC\tabsolute names of all library archives\n"
"\t\t\tto be built.\n"
"  NDK_BUILD_SHARED\tabsolute names of all shared libraries to\n"
"\t\t\tbe built.\n"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:227
msgid "and then proceeds to define rules to build each of the modules in $(NDK_BUILD_MODULES)."
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:230
msgid "cross/src/Makefile arranges to have all dependencies of Emacs not already built built before linking ``libemacs.so'' with them."
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:235
msgid "java/Makefile additionally arranges to have all shared object dependencies built before the application package is built, which is normally redundant because they should have already been built before linking ``libemacs.so''."
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:242
msgid "Building the modules is performed through $ndk_DIR/Makefile, which contains the actual implementation of the ``ndk-build'' build system.  First, it defines certain variables constant within the ``ndk-build'' build system, such as the files included by ``Android.mk'' to build shared or static libraries, and CLEAR_VARS.  The most important of these are:"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:249
#, no-wrap
msgid ""
"  CLEAR_VARS\t\t\tcross/ndk-build/ndk-clear-vars.mk\n"
"  BUILD_EXECUTABLE\t\tcross/ndk-build/ndk-build-executable.mk\n"
"  BUILD_SHARED_LIBRARY\t\tcross/ndk-build/ndk-build-shared-library.mk\n"
"  BUILD_STATIC_LIBRARY\t\tcross/ndk-build/ndk-build-static-library.mk\n"
"  PREBUILT_SHARED_LIBRARY\tcross/ndk-build/ndk-prebuilt-shared-library.mk\n"
"  PREBUILT_STATIC_LIBRARY\tcross/ndk-build/ndk-prebuilt-static-library.mk\n"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:255
msgid "Then, it loads each Emacs dependency's ``Android.mk'' file.  For each module defined there, ``Android.mk'' includes $(CLEAR_VARS) to unset all variables specific to each module, and then includes $(BUILD_SHARED_LIBRARY) or $(BUILD_STATIC_LIBRARY) for each shared or static library module."
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:259
msgid "This results in cross/ndk-build/ndk-build-shared-library.mk or cross/ndk-build/ndk-build-static-library being included, just like the Makefiles in build-aux were inside the configure script."
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:265
msgid "Each one of those two scripts then defines rules to build all of the object files associated with the module, and then link or archive them.  The name under which the module is linked is the same as the Make target found on the sixth line of output from build-aux/ndk-build-helper.mk."
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:270
msgid "In doing so, they both include the file ndk-resolve.mk.  ndk-resolve.mk is expected to recursively add all of the exported CFLAGS and includes of any dependencies to the compiler and linker command lines for the module being built."
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:276
msgid "When building a shared library module, ndk-resolve.mk is also expected to define the variables NDK_LOCAL_A_NAMES_$(LOCAL_MODULE) and NDK_WHOLE_A_NAMES_$(LOCAL_MODULE), containing all static library dependencies' archive files.  They are to be linked in to the resulting shared object file."
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:280
msgid "This is done by including cross/ndk-build/ndk-resolve.mk each time a shared or static library module is going to be built.  How is this done?"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:284
msgid "First, ndk-resolve.mk saves the LOCAL_PATH, LOCAL_STATIC_LIBRARIES, LOCAL_SHARED_LIBRARIES, LOCAL_EXPORT_CFLAGS and LOCAL_EXPORT_C_INCLUDES from the module."
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:288
msgid "Next, ndk-resolve loops through the dependencies the module has specified, appending its CFLAGS and includes to the command line for the current module."
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:291
msgid "Then, that process is repeated for each such dependency which has not already been resolved, until all dependencies have been resolved."
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:296
msgid "libpng is a very simple module, providing only a single shared object module.\t This module is named libpng_emacs.so and is eventually built and packaged into the library directory of the Emacs application package.  Now, let us look at a more complex module, libwebp:"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:302
msgid "When built with libwebp, Emacs depends on a single library, libwebpdemux.  This library is named ``libwebpdemux'' on Unix systems, and that is the name by which it is found with pkg-config."
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:307
msgid "However, the library's module is only named ``webpdemux'' on Android.  When ndk_CHECK_MODULES begins to look for a module, it first tries to see if its name is found in the variable `ndk_package_map', which was set inside ndk_INIT.  In this case, it finds the following word:"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:309
#, no-wrap
msgid "  libwebpdemux:webpdemux\n"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:311
msgid "and immediately replaces ``libwebpdemux'' with ``webpdemux''."
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:315
msgid "Then, it locates the ``Android.mk'' file containing a static library module named webpdemux and gives the output from build-aux/ndk-build-helper.mk to the awk script, resulting in:"
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:323
msgid "module_name=webpdemux module_kind=static module_src=\"/opt/android/webp/src/demux/anim_decode.c /opt/android/webp/src/demux/demux.c\" module_includes=\"-I/opt/android/webp/src\" module_cflags=\"\" module_ldflags=\" cross/ndk-build/libwebpdemux.a cross/ndk-build/libwebp.a cross/ndk-build/libwebpdecoder_static.a \" module_target=\"libwebpdemux.a libwebp.a libwebpdecoder_static.a\""
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:333
msgid "The attentive reader will notice that in addition to the ``libwebpdemux.a'' archive associated with the ``webpdemux'' library, Emacs has been made to link with two additional libraries.  This is because the ``webpdemux'' module specifies a dependency on the ``webp'' module (defined in the same Android.mk).  build-aux/ndk-build-helper.mk resolved that dependency, noticing that it in turn specified another dependency on ``webpdecoder_static'', which in turn was added to the linker command line and list of targets to build."
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:337
msgid "As a result, all three dependencies will be built and linked to Emacs, instead of just the single ``webpdemux'' dependency that was specified."
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:341
msgid "This file is part of GNU Emacs."
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:346
msgid "GNU Emacs is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version."
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:351
msgid "GNU Emacs is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details."
msgstr ""

#. type: Plain text
#: emacs-30/cross/ndk-build/README_editable:353
msgid "You should have received a copy of the GNU General Public License along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>."
msgstr ""
