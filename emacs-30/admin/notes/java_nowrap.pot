# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2024-11-04 05:33+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:2
msgid "Installation instructions for Android Copyright (C) 2023-2024 Free Software Foundation, Inc. See the end of the file for license conditions."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:7
msgid "OVERVIEW OF JAVA"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:10
msgid "Emacs developers do not know Java, and there is no reason they should have to.  Thus, the code in this directory is confined to what is strictly necessary to support Emacs, and only uses a subset of Java written in a way that is easily understandable to C programmers."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:14
msgid "Java is required because the entire Android runtime is based around Java, and there is no way to write an Android program which runs without Java.  This text exists to prime other Emacs developers, already familiar with C, on the basic architecture of the Android port, and to teach them how to read and write the Java code found in this directory.  Java is an object oriented language with automatic memory management compiled down to bytecode, which is then subject to interpretation by a Java virtual machine."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:16
msgid "What that means, is that:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:19
#, no-wrap
msgid "struct emacs_window {   int some_fields;   int of_emacs_window; };\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:22
#, no-wrap
msgid "static void do_something_with_emacs_window (struct emacs_window *a, int n) {   a->some_fields = a->of_emacs_window + n; }\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:25
msgid "would be written:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:28
#, no-wrap
msgid "public class EmacsWindow {   public int someFields;   public int ofEmacsWindow;\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:31
#, no-wrap
msgid "  public void   doSomething (int n)   {     someFields = ofEmacsWindow + n;   } }\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:34
msgid "and instead of doing:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:37
msgid "do_something_with_emacs_window (my_window, 1);"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:40 emacs-30/admin/notes/java_nowrap:73
msgid "you say:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:43
msgid "myWindow.doSomething (1);"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:46
msgid "In addition to functions associated with an object of a given class (such as EmacsWindow), Java also has two other kinds of functions."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:49
msgid "The first are so-called ``static'' functions (the static means something entirely different from what it does in C.)"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:52
msgid "A static function, while still having to be defined within a class, can be called without any object.  Instead of the object, you write the name of the Java class within which it is defined.\tFor example, the following C code:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:55
#, no-wrap
msgid "int multiply_a_with_b_and_then_add_c (int a, int b, int c) {   return a * b + c; }\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:58
msgid "would be:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:61
#, no-wrap
msgid "public class EmacsSomething {   public static int   multiplyAWithBAndThenAddC (int a, int b, int c)   {     return a * b + c;   } };\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:64
msgid "Then, instead of calling:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:67 emacs-30/admin/notes/java_nowrap:76
msgid "int foo;"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:70
msgid "foo = multiply_a_with_b_then_add_c (1, 2, 3);"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:79
msgid "foo = EmacsSomething.multiplyAWithBAndThenAddC (1, 2, 3);"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:81
msgid "In Java, ``static'' does not mean that the function is only used within its compilation unit! Instead, the ``private'' qualifier is used to mean more or less the same thing:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:83
#, no-wrap
msgid "static void this_procedure_is_only_used_within_this_file (void) {   do_something (); }\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:86
msgid "becomes"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:89
#, no-wrap
msgid "public class EmacsSomething {   private static void   thisProcedureIsOnlyUsedWithinThisClass ()   {\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:92
#, no-wrap
msgid "  } }\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:95
msgid "the other kind are called ``constructors''.  They are functions that must be called to allocate memory to hold a class:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:97
#, no-wrap
msgid "public class EmacsFoo {   int bar;\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:99
#, no-wrap
msgid "  public   EmacsFoo (int tokenA, int tokenB)   {     bar = tokenA + tokenB;   } }\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:102
msgid "now, the following statement:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:105
msgid "EmacsFoo foo;"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:108
msgid "foo = new EmacsFoo (1, 2);"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:111
msgid "becomes more or less equivalent to the following C code:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:114
#, no-wrap
msgid "struct emacs_foo {   int bar; };\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:117
#, no-wrap
msgid "struct emacs_foo * make_emacs_foo (int token_a, int token_b) {   struct emacs_foo *foo;\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:120
#, no-wrap
msgid "  foo = xmalloc (sizeof *foo);   foo->bar = token_a + token_b;\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:123
#, no-wrap
msgid "  return foo; }\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:126
msgid "/* ... */"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:129
msgid "struct emacs_foo *foo;"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:132
msgid "foo = make_emacs_foo (1, 2);"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:135
msgid "A class may have any number of constructors, or no constructors at all, in which case the compiler inserts an empty constructor."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:141
msgid "Sometimes, you will see Java code that looks like this:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:144
#, no-wrap
msgid "    allFiles = filesDirectory.listFiles (new FileFilter () { \t@Override \tpublic boolean \taccept (File file) \t{ \t  return (!file.isDirectory () \t\t  && file.getName ().endsWith (\".pdmp\")); \t}       });\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:147
msgid "This is Java's version of GCC's nested function extension.  The major difference is that the nested function may still be called even after it goes out of scope, and always retains a reference to the class and local variables around where it was called."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:150
msgid "Being an object-oriented language, Java also allows defining that a class ``extends'' another class.  The following C code:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:153
#, no-wrap
msgid "struct a {   long thirty_two; };\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:156
#, no-wrap
msgid "struct b {   struct a a;   long long sixty_four; };\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:159
msgid "extern void do_something (struct a *);"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:162
#, no-wrap
msgid "void my_function (struct b *b) {   do_something (&b->a); }\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:165
msgid "is roughly equivalent to the following Java code, split into two files:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:168
#, no-wrap
msgid "  A.java\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:170
#, no-wrap
msgid "public class A {   int thirtyTwo;\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:172
#, no-wrap
msgid "  public void   doSomething ()   {     etcEtcEtc ();   } };\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:175
#, no-wrap
msgid "  B.java\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:177 emacs-30/admin/notes/java_nowrap:187
#, no-wrap
msgid "public class B extends A {   long sixty_four;\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:179
#, no-wrap
msgid "  public static void   myFunction (B b)   {     b.doSomething ();   } }\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:182
msgid "the Java runtime has transformed the call to ``b.doSomething'' to ``((A) b).doSomething''."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:185
msgid "However, Java also allows overriding this behavior, by specifying the @Override keyword:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:189
#, no-wrap
msgid "  @Override   public void   doSomething ()   {     Something.doSomethingTwo ();     super.doSomething ();   } }\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:192
msgid "now, any call to ``doSomething'' on a ``B'' created using ``new B ()'' will end up calling ``Something.doSomethingTwo'', before calling back to ``A.doSomething''.  This override also applies in reverse; that is to say, even if you write:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:195
#, no-wrap
msgid "  ((A) b).doSomething ();\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:198
msgid "B's version of doSomething will still be called, if ``b'' was created using ``new B ()''."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:201
msgid "This mechanism is used extensively throughout the Java language and Android windowing APIs."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:204
msgid "Elsewhere, you will encounter Java code that defines arrays:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:207
#, no-wrap
msgid "public class EmacsFrobinicator {   public static void   emacsFrobinicate (int something)   {     int[] primesFromSomething;\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:210
#, no-wrap
msgid "    primesFromSomething = new int[numberOfPrimes];     /* ... */   } }\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:213
msgid "Java arrays are similar to C arrays in that they can not grow.  But they are very much unlike C arrays in that they are always references (as opposed to decaying into pointers in only some situations), and contain information about their length."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:216
msgid "If another function named ``frobinicate1'' takes an array as an argument, then it need not take the length of the array."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:219
msgid "Instead, it may simply iterate over the array like so:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:222
msgid "int i, k;"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:224
#, no-wrap
msgid "for (i = 0; i < array.length; ++i)   {     k = array[i];\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:226
#, no-wrap
msgid "    Whatever.doSomethingWithK (k);   }\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:230
#, no-wrap
msgid ""
"The syntax used to define arrays is also slightly different.  As arrays are always references, there is no way for you to tell the runtime to allocate an array of size N in a structure (class.)\n"
"Instead, if you need an array of that size, you must declare a field with the type of the array, and allocate the array inside the class's constructor, like so:\n"
"public class EmacsArrayContainer {   public int[] myArray;\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:232
#, no-wrap
msgid "  public   EmacsArrayContainer ()   {     myArray = new array[10];   } }\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:235
msgid "while in C, you could just have written:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:238
#, no-wrap
msgid "struct emacs_array_container {   int my_array[10]; };\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:241
msgid "or, possibly even better,"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:244
msgid "typedef int emacs_array_container[10];"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:247
msgid "Alas, Java has no equivalent of `typedef'."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:250
msgid "Like in C, Java string literals are delimited by double quotes. Unlike C, however, strings are not NULL-terminated arrays of characters, but a distinct type named ``String''.  They store their own length, characters in Java's 16-bit ``char'' type, and are capable of holding NULL bytes."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:253
msgid "Instead of writing:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:255
msgid "wchar_t character; extern char *s; size_t s;"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:257
#, no-wrap
msgid "  for (/* determine n, s in a loop.  */)     s += mbstowc (&character, s, n);\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:260
msgid "or:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:263
msgid "const char *byte;"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:266
#, no-wrap
msgid "for (byte = my_string; *byte; ++byte)   /* do something with *byte.  */;\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:269
msgid "or perhaps even:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:272
msgid "size_t length, i; char foo;"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:275
msgid "length = strlen (my_string);"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:278
#, no-wrap
msgid "for (i = 0; i < length; ++i)   foo = my_string[i];\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:281
msgid "you write:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:284
msgid "char foo; int i;"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:287
#, no-wrap
msgid "for (i = 0; i < myString.length (); ++i)   foo = myString.charAt (0);\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:289
msgid "Java also has stricter rules on what can be used as a truth value in a conditional.  While in C, any non-zero value is true, Java requires that every truth value be of the boolean type ``boolean''."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:291
msgid "What this means is that instead of simply writing:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:294
#, no-wrap
msgid "  if (foo || bar)\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:297
msgid "where foo can either be 1 or 0, and bar can either be NULL or a pointer to something, you must explicitly write:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:300
#, no-wrap
msgid "  if (foo != 0 || bar != null)\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:303
msgid "in Java."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:306
msgid "JAVA NATIVE INTERFACE"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:309
msgid "Java also provides an interface for C code to interface with Java."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:312
msgid "C functions exported from a shared library become static Java functions within a class, like so:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:315
#, no-wrap
msgid "public class EmacsNative {   /* Obtain the fingerprint of this build of Emacs.  The fingerprint      can be used to determine the dump file name.  */   public static native String getFingerprint ();\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:318
#, no-wrap
msgid "  /* Set certain parameters before initializing Emacs.\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:320
#, no-wrap
msgid "     assetManager must be the asset manager associated with the      context that is loading Emacs.  It is saved and remains for the      remainder the lifetime of the Emacs process.\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:322
#, no-wrap
msgid "     filesDir must be the package's data storage location for the      current Android user.\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:325
#, no-wrap
msgid "     libDir must be the package's data storage location for native      libraries.\t It is used as PATH.\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:328
#, no-wrap
msgid "     cacheDir must be the package's cache directory.  It is used as      the `temporary-file-directory'.\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:331
#, no-wrap
msgid "     pixelDensityX and pixelDensityY are the DPI values that will be      used by Emacs.\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:334
#, no-wrap
msgid "     classPath must be the classpath of this app_process process, or      NULL.\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:337
#, no-wrap
msgid "     emacsService must be the EmacsService singleton, or NULL.\t*/   public static native void setEmacsParams (AssetManager assetManager, \t\t\t\t\t    String filesDir, \t\t\t\t\t    String libDir, \t\t\t\t\t    String cacheDir, \t\t\t\t\t    float pixelDensityX, \t\t\t\t\t    float pixelDensityY, \t\t\t\t\t    String classPath, \t\t\t\t\t    EmacsService emacsService); }\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:340
msgid "Where the corresponding C functions are located in android.c, and loaded by the special invocation:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:343
#, no-wrap
msgid "  static   {     System.loadLibrary (\"emacs\");   };\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:346
msgid "where ``static'' defines a section of code which will be run upon the object (containing class) being loaded.  This is like:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:349
#, no-wrap
msgid "  __attribute__ ((constructor))\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:352
msgid "on systems where shared object constructors are supported."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:355
msgid "See http://docs.oracle.com/en/java/javase/19/docs/specs/jni/intro.html for more details."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:361
msgid "OVERVIEW OF ANDROID"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:363
msgid "When the Android system starts an application, it does not actually call the application's ``main'' function.  It may not even start the application's process if one is already running."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:365
msgid "Instead, Android is organized around components.  When the user opens the ``Emacs'' icon, the Android system looks up and starts the component associated with the ``Emacs'' icon.  In this case, the component is called an activity, and is declared in the AndroidManifest.xml in this directory:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:368
#, no-wrap
msgid "    <activity android:name=\"org.gnu.emacs.EmacsActivity\" \t      android:launchMode=\"singleTop\" \t      android:windowSoftInputMode=\"adjustResize\" \t      android:exported=\"true\" \t      android:configChanges=\"orientation|screenSize|screenLayout|keyboardHidden\">       <intent-filter> \t<action android:name=\"android.intent.action.MAIN\" /> \t<category android:name=\"android.intent.category.DEFAULT\" /> \t<category android:name=\"android.intent.category.LAUNCHER\" />       </intent-filter>     </activity>\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:370
msgid "This tells Android to start the activity defined in ``EmacsActivity'' (defined in org/gnu/emacs/EmacsActivity.java), a class extending the Android class ``Activity''."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:372
msgid "To do so, the Android system creates an instance of ``EmacsActivity'' and the window system window associated with it, and eventually calls:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:375
#, no-wrap
msgid "  Activity activity;\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:378
#, no-wrap
msgid "  activity.onCreate (...);\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:380
msgid "But which ``onCreate'' is really called? It is actually the ``onCreate'' defined in EmacsActivity.java, as it overrides the ``onCreate'' defined in Android's own Activity class:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:382
#, no-wrap
msgid "  @Override   public void   onCreate (Bundle savedInstanceState)   {     FrameLayout.LayoutParams params;     Intent intent;\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:385
msgid "Then, this is what happens step-by-step within the ``onCreate'' function:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:388
#, no-wrap
msgid "    /* See if Emacs should be started with -Q.\t*/     intent = getIntent ();     EmacsService.needDashQ       = intent.getBooleanExtra (\"org.gnu.emacs.START_DASH_Q\", \t\t\t\tfalse);\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:390
msgid "Here, Emacs obtains the intent (a request to start a component) which was used to start Emacs, and sets a special flag if it contains a request for Emacs to start with the ``-Q'' command-line argument."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:392
#, no-wrap
msgid "    /* Set the theme to one without a title bar.  */\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:395
#, no-wrap
msgid "    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH)       setTheme (android.R.style.Theme_DeviceDefault_NoActionBar);     else       setTheme (android.R.style.Theme_NoTitleBar);\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:398
msgid "Next, Emacs sets an appropriate theme for the activity's associated window decorations."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:401
#, no-wrap
msgid "    params = new FrameLayout.LayoutParams (LayoutParams.MATCH_PARENT, \t\t\t\t\t   LayoutParams.MATCH_PARENT);\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:403
#, no-wrap
msgid "    /* Make the frame layout.  */     layout = new FrameLayout (this);     layout.setLayoutParams (params);\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:405
#, no-wrap
msgid "    /* Set it as the content view.  */     setContentView (layout);\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:408
msgid "Then, Emacs creates a ``FrameLayout'', a widget that holds a single other widget, and makes it the activity's ``content view''."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:411
msgid "The activity itself is a ``FrameLayout'', so the ``layout parameters'' here apply to the FrameLayout itself, and not its children."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:414
#, no-wrap
msgid "    /* Maybe start the Emacs service if necessary.  */     EmacsService.startEmacsService (this);\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:416
msgid "And after that, Emacs calls the static function ``startEmacsService'', defined in the class ``EmacsService''.\tThis starts the Emacs service component if necessary."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:418
#, no-wrap
msgid "    /* Add this activity to the list of available activities.  */     EmacsWindowAttachmentManager.MANAGER.registerWindowConsumer (this);\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:421
#, no-wrap
msgid "    super.onCreate (savedInstanceState);\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:424
msgid "Finally, Emacs registers that this activity is now ready to receive top-level frames (windows) created from Lisp."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:426
msgid "Activities come and go, but Emacs has to stay running in the mean time.  Thus, Emacs also defines a ``service'', which is a long-running component that the Android system allows to run in the background."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:428
msgid "Let us go back and review the definition of ``startEmacsService'':"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:431
#, no-wrap
msgid "  public static void   startEmacsService (Context context)   {     if (EmacsService.SERVICE == null)       { \tif (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) \t  /* Start the Emacs service now.  */ \t  context.startService (new Intent (context, \t\t\t\t\t    EmacsService.class)); \telse \t  /* Display the permanent notification and start Emacs as a \t     foreground service.  */ \t  context.startForegroundService (new Intent (context, \t\t\t\t\t\t      EmacsService.class));       }   }\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:434
msgid "If ``EmacsService.SERVICE'' does not yet exist, what this does is to tell the ``context'' (the equivalent of an Xlib Display *) to start a service defined by the class ``EmacsService''.\tEventually, this results in ``EmacsService.onCreate'' being called:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:437
#, no-wrap
msgid "  @Override   public void   onCreate ()   {     AssetManager manager;     Context app_context;     String filesDir, libDir, cacheDir, classPath;     double pixelDensityX;     double pixelDensityY;\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:440
msgid "Here is what this function does, step-by-step:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:443
#, no-wrap
msgid "    SERVICE = this;\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:446
msgid "First, it sets the special static variable ``SERVICE'' to ``this'', which is a pointer to the ``EmacsService' object that was created."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:449
#, no-wrap
msgid "    handler = new Handler (Looper.getMainLooper ());\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:451
msgid "Next, it creates a ``Handler'' object for the ``main looper''. This is a helper structure which allows executing code on the Android user interface thread."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:453
#, no-wrap
msgid "    manager = getAssets ();     app_context = getApplicationContext ();     metrics = getResources ().getDisplayMetrics ();     pixelDensityX = metrics.xdpi;     pixelDensityY = metrics.ydpi;\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:456
msgid "Finally, it obtains:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:459
#, no-wrap
msgid "  - the asset manager, which is used to retrieve assets packaged     into the Emacs application package.\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:462
#, no-wrap
msgid "  - the application context, used to obtain application specific     information.\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:465
#, no-wrap
msgid "  - the display metrics, and from them, the X and Y densities in dots     per inch.\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:468
msgid "Then, inside a ``try'' block:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:471
#, no-wrap
msgid "    try       { \t/* Configure Emacs with the asset manager and other necessary \t   parameters.\t*/ \tfilesDir = app_context.getFilesDir ().getCanonicalPath (); \tlibDir = getLibraryDirectory (); \tcacheDir = app_context.getCacheDir ().getCanonicalPath ();\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:474
msgid "It obtains the names of the Emacs home, shared library, and temporary file directories."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:477
#, no-wrap
msgid "\t/* Now provide this application's apk file, so a recursive \t   invocation of app_process (through android-emacs) can \t   find EmacsNoninteractive.  */ \tclassPath = getApkFile ();\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:480
msgid "The name of the Emacs application package."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:483
#, no-wrap
msgid "\tLog.d (TAG, \"Initializing Emacs, where filesDir = \" + filesDir \t       + \", libDir = \" + libDir + \", and classPath = \" + classPath);\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:486
msgid "Prints a debug message to the Android system log with this information."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:489
#, no-wrap
msgid "\tEmacsNative.setEmacsParams (manager, filesDir, libDir, \t\t\t\t    cacheDir, (float) pixelDensityX, \t\t\t\t    (float) pixelDensityY, \t\t\t\t    classPath, this);\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:492
msgid "And calls the native function ``setEmacsParams'' (defined in android.c) to configure Emacs with this information."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:494
#, no-wrap
msgid "\t/* Start the thread that runs Emacs.  */ \tthread = new EmacsThread (this, needDashQ); \tthread.start ();\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:496
msgid "Then, it allocates an ``EmacsThread'' object, and starts that thread. Inside that thread is where Emacs's C code runs."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:499
#, no-wrap
msgid "      }     catch (IOException exception)       { \tEmacsNative.emacsAbort (); \treturn;\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:502
msgid "And here is the purpose of the ``try'' block.  Functions related to file names in Java will signal errors of various types upon failure."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:505
msgid "This ``catch'' block means that the Java virtual machine will abort execution of the contents of the ``try'' block as soon as an error of type ``IOException'' is encountered, and begin executing the contents of the ``catch'' block."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:508
#, no-wrap
msgid "Any failure of that type here is a crash, and ``EmacsNative.emacsAbort'' is called to quickly abort the process to get a useful backtrace.       }   }\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:511
msgid "Now, let us look at the definition of the class ``EmacsThread'', found in org/gnu/emacs/EmacsThread.java:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:514
#, no-wrap
msgid "public class EmacsThread extends Thread {   /* Whether or not Emacs should be started -Q.\t */   private boolean startDashQ;\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:517
#, no-wrap
msgid "  public   EmacsThread (EmacsService service, boolean startDashQ)   {     super (\"Emacs main thread\");     this.startDashQ = startDashQ;   }\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:520
#, no-wrap
msgid "  @Override   public void   run ()   {     String args[];\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:523
#, no-wrap
msgid "    if (!startDashQ)       args = new String[] { \"libandroid-emacs.so\", };     else       args = new String[] { \"libandroid-emacs.so\", \"-Q\", };\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:526
#, no-wrap
msgid "    /* Run the native code now.\t */     EmacsNative.initEmacs (args, EmacsApplication.dumpFileName);   } };\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:529
msgid "The class itself defines a single field, ``startDashQ'', a constructor with an unused argument of the type ``EmacsService'' (which is useful while debugging) and a flag ``startDashQ'', and a single function ``run'', overriding the same function in the class ``Thread''."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:532
msgid "When ``thread.start'' is called, the Java virtual machine creates a new thread, and then calls the function ``run'' within that thread."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:534
msgid "This function then computes a suitable argument vector, and calls ``EmacsNative.initEmacs'' (defined in android.c), which then calls a modified version of the regular Emacs ``main'' function."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:536
msgid "At that point, Emacs initialization proceeds as usual: Vinitial_window_system is set, loadup.el calls `normal-top-level', which calls `command-line', and finally `window-system-initialization', which initializes the `android' terminal interface as usual."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:538
msgid "What happens here is the same as on other platforms.  Now, here is what happens when the initial frame is created: Fx_create_frame calls `android_create_frame_window' to create a top level window:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:540
#, no-wrap
msgid "static void android_create_frame_window (struct frame *f) {   struct android_set_window_attributes attributes;   enum android_window_value_mask attribute_mask;\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:543
#, no-wrap
msgid "  attributes.background_pixel = FRAME_BACKGROUND_PIXEL (f);   attribute_mask = ANDROID_CW_BACK_PIXEL;\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:546
#, no-wrap
msgid "  block_input ();   FRAME_ANDROID_WINDOW (f)     = android_create_window (FRAME_DISPLAY_INFO (f)->root_window, \t\t\t     f->left_pos, \t\t\t     f->top_pos, \t\t\t     FRAME_PIXEL_WIDTH (f), \t\t\t     FRAME_PIXEL_HEIGHT (f), \t\t\t     attribute_mask, &attributes);   unblock_input (); }\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:549
msgid "This calls the function `android_create_window' with some arguments whose meanings are identical to the arguments to `XCreateWindow'."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:552
msgid "Here is the definition of `android_create_window', in android.c:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:555
#, no-wrap
msgid "android_window android_create_window (android_window parent, int x, int y, \t\t       int width, int height, \t\t       enum android_window_value_mask value_mask, \t\t       struct android_set_window_attributes *attrs) {   static jclass class;   static jmethodID constructor;   jobject object, parent_object, old;   android_window window;   android_handle prev_max_handle;   bool override_redirect;\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:558
msgid "What does it do? First, some context:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:561
msgid "At any time, there can be at most 65535 Java objects referred to by the rest of Emacs through the Java native interface.  Each such object is assigned a ``handle'' (similar to an XID on X) and given a unique type.  The function `android_resolve_handle' returns the JNI `jobject' associated with a given handle."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:564
#, no-wrap
msgid "  parent_object = android_resolve_handle (parent, ANDROID_HANDLE_WINDOW);\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:567
msgid "Here, it is being used to look up the `jobject' associated with the `parent' handle."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:570
#, no-wrap
msgid "  prev_max_handle = max_handle;   window = android_alloc_id ();\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:573
msgid "Next, `max_handle' is saved, and a new handle is allocated for `window'."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:576
#, no-wrap
msgid "  if (!window)     error (\"Out of window handles!\");\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:579
msgid "An error is signaled if Emacs runs out of available handles."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:582
#, no-wrap
msgid "  if (!class)     {       class = (*android_java_env)->FindClass (android_java_env, \t\t\t\t\t      \"org/gnu/emacs/EmacsWindow\");       assert (class != NULL);\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:585
msgid "Then, if this initialization has not yet been completed, Emacs proceeds to find the Java class named ``EmacsWindow''."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:588
#, no-wrap
msgid "      constructor \t= (*android_java_env)->GetMethodID (android_java_env, class, \"<init>\", \t\t\t\t\t    \"(SLorg/gnu/emacs/EmacsWindow;\" \t\t\t\t\t    \"IIIIZ)V\");       assert (constructor != NULL);\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:591
msgid "And it tries to look up the constructor, which should take seven arguments:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:594
#, no-wrap
msgid "  S\t\t\t\t\t- a short.  (the handle ID)   Lorg/gnu/Emacs/EmacsWindow;\t\t- an instance of the EmacsWindow \t\t\t\t\t  class.  (the parent)   IIII\t\t\t\t\t- four ints.  (the window geometry.)   Z\t\t\t\t\t- a boolean.  (whether or not the \t\t\t\t\t  window is override-redirect; see \t\t\t\t\t  XChangeWindowAttributes.)\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:597
#, no-wrap
msgid "      old = class;       class = (*android_java_env)->NewGlobalRef (android_java_env, class);       (*android_java_env)->ExceptionClear (android_java_env);       ANDROID_DELETE_LOCAL_REF (old);\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:600
#, no-wrap
msgid ""
"Next, it saves a global reference to the class and deletes the local reference.  Global references will never be deallocated by the Java virtual machine as long as they still exist.\n"
"      if (!class) \tmemory_full (0);     }\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:602
#, no-wrap
msgid "  /* N.B. that ANDROID_CW_OVERRIDE_REDIRECT can only be set at window      creation time.  */   override_redirect = ((value_mask \t\t\t& ANDROID_CW_OVERRIDE_REDIRECT) \t\t       && attrs->override_redirect);\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:605
#, no-wrap
msgid "  object = (*android_java_env)->NewObject (android_java_env, class, \t\t\t\t\t   constructor, (jshort) window, \t\t\t\t\t   parent_object, (jint) x, (jint) y, \t\t\t\t\t   (jint) width, (jint) height, \t\t\t\t\t   (jboolean) override_redirect);\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:608
msgid "Then, it creates an instance of the ``EmacsWindow'' class with the appropriate arguments and previously determined constructor."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:610
#, no-wrap
msgid "  if (!object)     {       (*android_java_env)->ExceptionClear (android_java_env);\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:612
#, no-wrap
msgid "      max_handle = prev_max_handle;       memory_full (0);\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:614
#, no-wrap
msgid "If creating the object fails, Emacs clears the ``pending exception'' and signals that it is out of memory.     }\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:616
#, no-wrap
msgid "  android_handles[window].type = ANDROID_HANDLE_WINDOW;   android_handles[window].handle     = (*android_java_env)->NewGlobalRef (android_java_env, \t\t\t\t\t object);   (*android_java_env)->ExceptionClear (android_java_env);   ANDROID_DELETE_LOCAL_REF (object);\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:618
msgid "Otherwise, it associates a new global reference to the object with the handle, and deletes the local reference returned from the JNI NewObject function."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:620
#, no-wrap
msgid "  if (!android_handles[window].handle)     memory_full (0);\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:623
msgid "If allocating the global reference fails, Emacs signals that it is out of memory."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:626
#, no-wrap
msgid "  android_change_window_attributes (window, value_mask, attrs);   return window;\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:628
msgid "Otherwise, it applies the specified window attributes and returns the handle of the new window. }"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:633
msgid "DRAWABLES, CURSORS AND HANDLES"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:636
msgid "Each widget created by Emacs corresponds to a single ``window'', which has its own backing store.  This arrangement is quite similar to X."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:639
msgid "C code does not directly refer to the EmacsView widgets that implement the UI logic behind windows.  Instead, its handles refer to EmacsWindow structures, which contain the state necessary to interact with the widgets in an orderly and synchronized manner."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:642
msgid "Like X, both pixmaps and windows are drawable resources, and the same graphics operations can be applied to both.  Thus, a separate EmacsPixmap structure is used to wrap around Android Bitmap resources, and the Java-level graphics operation functions are capable of operating on them both."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:645
msgid "Finally, graphics contexts are maintained on both the C and Java levels; the C state recorded in `struct android_gc' is kept in sync with the Java state in the GContext handle's corresponding EmacsGC structure, and cursors are used through handles that refer to EmacsCursor structures that hold system PointerIcons."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:648
msgid "In all cases, the interfaces provided are identical to X."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:654
msgid "EVENT LOOP"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:657
msgid "In a typical Android application, the event loop is managed by the operating system, and callbacks (implemented through overriding separate functions in widgets) are run by the event loop wherever necessary.  The thread which runs the event loop is also the only thread capable of creating and manipulating widgets and activities, and is referred to as the ``UI thread''."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:660
msgid "These callbacks are used by Emacs to write representations of X-like events to a separate event queue, which are then read from Emacs's own event loop running in a separate thread.  This is accomplished through replacing `select' by a function which waits for the event queue to be occupied, in addition to any file descriptors that `select' would normally wait for."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:662
msgid "Conversely, Emacs's event loop sometimes needs to send events to the UI thread.  These events are implemented as tiny fragments of code, which are run as they are received by the main thread."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:664
msgid "A typical example is `displayToast', which is implemented in EmacsService.java:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:667
#, no-wrap
msgid "  public void   displayToast (final String string)   {     runOnUiThread (new Runnable () { \t@Override \tpublic void \trun () \t{ \t  Toast toast;\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:670
#, no-wrap
msgid "\t  toast = Toast.makeText (getApplicationContext (), \t\t\t\t  string, Toast.LENGTH_SHORT); \t  toast.show (); \t}       });   }\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:673
msgid "Here, the variable `string' is used by a nested function.  This nested function contains a copy of that variable, and is run on the main thread using the function `runOnUiThread', in order to display a short status message on the display."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:676
msgid "When Emacs needs to wait for the nested function to finish, it uses a mechanism implemented in `syncRunnable'.  This mechanism first calls a deadlock avoidance mechanism, then runs a nested function on the UI thread, which is expected to signal itself as a condition variable upon completion.  It is typically used to allocate resources that can only be allocated from the UI thread, or to obtain non-thread-safe information.  The following function is an example; it returns a new EmacsView widget corresponding to the provided window:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:679
#, no-wrap
msgid "  public EmacsView   getEmacsView (final EmacsWindow window, final int visibility, \t\tfinal boolean isFocusedByDefault)   {     Runnable runnable;     final EmacsHolder<EmacsView> view;\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:682
#, no-wrap
msgid "    view = new EmacsHolder<EmacsView> ();\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:685
#, no-wrap
msgid "    runnable = new Runnable () { \tpublic void \trun () \t{ \t  synchronized (this) \t    { \t      view.thing = new EmacsView (window); \t      view.thing.setVisibility (visibility);\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:688
#, no-wrap
msgid "\t      /* The following function is only present on Android 26 \t\t or later.  */ \t      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) \t\tview.thing.setFocusedByDefault (isFocusedByDefault);\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:691
#, no-wrap
msgid "\t      notify (); \t    } \t}       };\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:693
#, no-wrap
msgid "    syncRunnable (runnable);     return view.thing;   }\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:695
msgid "As no value can be directly returned from the nested function, a separate container object is used to hold the result after the function finishes execution.  Note the type name inside the angle brackets: this type is substituted into the class definition as it is used; a definition such as:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:698
#, no-wrap
msgid "public class Foo<T> {   T bar; };\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:701
msgid "can not be used alone:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:704
#, no-wrap
msgid "  Foo holder; /* Error! */\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:707
msgid "but must have a type specified:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:710
#, no-wrap
msgid "  Foo<Object> holder;\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:713
msgid "in which case the effective definition is:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:716
#, no-wrap
msgid "public class Foo {   Object bar; };\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:722
msgid "COMPATIBILITY"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:725
msgid "There are three variables set within every Android application that extert influence over the set of Android systems it supports, and the measures it must take to function faithfully on each of those systems: the minimum API level, compile SDK version and target API level."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:728
msgid "The minimum API level is the earliest version of Android that is permitted to install and run the application.  For Emacs, this is established by detecting the __ANDROID_API__ preprocessor macro defined within the Android C compiler."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:730
msgid "Before Java code executes any Android API calls that are not present within Android 2.2 (API level 8), the lowest API level supported by Emacs as a whole, it must first check the value of the:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:732
#, no-wrap
msgid "  Build.VERSION.SDK_INT\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:735
msgid "variable, which is always set to the API level of the system Emacs is presently installed within.  For example, before calling `dispatchKeyEventFromInputMethod', a function absent from Android 6.0 (API level 23) or earlier, check:"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:738
#, no-wrap
msgid "    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N)       view.imManager.dispatchKeyEventFromInputMethod (view, key);     else       {\n"
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:741
msgid "where `N' is a constant defined to 24."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:744
msgid "The compile SDK version is the version of the Android SDK headers Java code is compiled against.  Because Java does not provide conditional compilation constructs, Emacs can't be compiled with any version of these headers other than the version mentioned in `java/INSTALL', but the headers used do not affect the set of supported systems provided that the version checks illustrated above are performed where necessary."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:747
msgid "The target API level is a number within java/AndroidManifest.xml.in the system refers to when deciding whether to enable backwards-incompatible modifications to the behavior of various system APIs.  For any given Android version, backwards incompatible changes in that version will be disabled for applications whose target API levels don't exceed its own."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:750
msgid "The target API should nevertheless be updated to match every major Android update, as Google has stated their intentions to prohibit users from installing applications targeting ``out-of-date'' versions of Android, though this threat has hitherto been made good on."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:756
msgid "This file is part of GNU Emacs."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:759
msgid "GNU Emacs is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:762
msgid "GNU Emacs is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details."
msgstr ""

#. type: Plain text
#: emacs-30/admin/notes/java_nowrap:765
msgid "You should have received a copy of the GNU General Public License along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>."
msgstr ""
