# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2024-11-06 23:52+0900\n"
"PO-Revision-Date: 2024-11-18 01:41+0900\n"
"Last-Translator: ayatakesi\n"
"Language-Team: japan\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:4
msgid "Installation instructions for Android Copyright (C) 2023-2024 Free Software Foundation, Inc.  See the end of the file for license conditions."
msgstr ""
"```text\n"
"Installation instructions for Android\n"
"Copyright (C) 2023-2024 Free Software Foundation, Inc.\n"
"See the end of the file for license conditions.\n"
"```"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:8
msgid "OVERVIEW OF JAVA"
msgstr "# OVERVIEW OF JAVA"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:13
msgid "Emacs developers do not know Java, and there is no reason they should have to.  Thus, the code in this directory is confined to what is strictly necessary to support Emacs, and only uses a subset of Java written in a way that is easily understandable to C programmers."
msgstr "Emacs開発者はJavaを知らないし、知ることが必要だという理由も存在しない。故にこのディレクトリーにあるコードはEmacsのサポートに必要なコードに厳選されており、Cプログラマーにとって理解しやすい方法で記述されたJavaのサブセットだけを使用している。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:17
msgid "Java is required because the entire Android runtime is based around Java, and there is no way to write an Android program which runs without Java."
msgstr "Androidのランタイム全体がJavaを基本としていること、そしてJavaなしで実行されるAndroidプログラムを記述する方法がないことによりJavaは必須である。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:21
msgid "This text exists to prime other Emacs developers, already familiar with C, on the basic architecture of the Android port, and to teach them how to read and write the Java code found in this directory."
msgstr "これはすでにCに精通している他のEmacs開発者にたいして、Androidポートの基本的アーキテクチャを説明するために、そしてこのディレクトリーにあるJavaコードの読み方、記述する方法を説明するために存在するディレクトリーである。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:25
msgid "Java is an object oriented language with automatic memory management compiled down to bytecode, which is then subject to interpretation by a Java virtual machine."
msgstr "Java    自動的なうメモリー管理を備えたオブジェクト指向言語であり、バイトコードにコンパイルされてからJava仮想マシン(JVM: Java Virtual Machine)によって解釈される。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:27
msgid "What that means, is that:"
msgstr "これが何を意味するかというと:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:33
#, no-wrap
msgid ""
"struct emacs_window\n"
"{\n"
"  int some_fields;\n"
"  int of_emacs_window;\n"
"};\n"
msgstr ""
"```c\n"
"struct emacs_window\n"
"{\n"
"  int some_fields;\n"
"  int of_emacs_window;\n"
"};\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:39
#, no-wrap
msgid ""
"static void\n"
"do_something_with_emacs_window (struct emacs_window *a, int n)\n"
"{\n"
"  a->some_fields = a->of_emacs_window + n;\n"
"}\n"
msgstr ""
"```c\n"
"static void\n"
"do_something_with_emacs_window (struct emacs_window *a, int n)\n"
"{\n"
"  a->some_fields = a->of_emacs_window + n;\n"
"}\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:41
msgid "would be written:"
msgstr "上記は以下のように記述できる:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:46
#, no-wrap
msgid ""
"public class EmacsWindow\n"
"{\n"
"  public int someFields;\n"
"  public int ofEmacsWindow;\n"
msgstr ""
"```java\n"
"public class EmacsWindow\n"
"{\n"
"  public int someFields;\n"
"  public int ofEmacsWindow;\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:53
#, no-wrap
msgid ""
"  public void\n"
"  doSomething (int n)\n"
"  {\n"
"    someFields = ofEmacsWindow + n;\n"
"  }\n"
"}\n"
msgstr ""
"```java\n"
"  public void\n"
"  doSomething (int n)\n"
"  {\n"
"    someFields = ofEmacsWindow + n;\n"
"  }\n"
"}\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:55
msgid "and instead of doing:"
msgstr "Cの以下のような記述は:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:57
msgid "do_something_with_emacs_window (my_window, 1);"
msgstr ""
"```c\n"
"do_something_with_emacs_window (my_window, 1);\n"
"```"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:59 emacs-30/admin/notes/java_editable:97
msgid "you say:"
msgstr "javaでは以下のようになるのだ:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:61
msgid "myWindow.doSomething (1);"
msgstr ""
"```java\n"
"myWindow.doSomething (1);\n"
"```"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:64
msgid "In addition to functions associated with an object of a given class (such as EmacsWindow), Java also has two other kinds of functions."
msgstr "(`EmacsWindow`のように)与えられたクラスオブジェクトに関連付けられる関数に加えて、Javaには他に2種類の関数がある。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:67
msgid "The first are so-called ``static'' functions (the static means something entirely different from what it does in C.)"
msgstr "1つ目は`static`な関数だ(JavaのstaticはCの場合とはまったく異なるものを意味する)。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:72
msgid "A static function, while still having to be defined within a class, can be called without any object.  Instead of the object, you write the name of the Java class within which it is defined.\tFor example, the following C code:"
msgstr "static関数はクラスの内部定義する必要があるものの、オブジェクトなしで呼び出すことができる。オブジェクトのかわりにオブジェクトが定義されているJavaクラスの名前を記述する。たとえば以下のようなCコードなら:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:78
#, no-wrap
msgid ""
"int\n"
"multiply_a_with_b_and_then_add_c (int a, int b, int c)\n"
"{\n"
"  return a * b + c;\n"
"}\n"
msgstr ""
"```c\n"
"int\n"
"multiply_a_with_b_and_then_add_c (int a, int b, int c)\n"
"{\n"
"  return a * b + c;\n"
"}\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:80
msgid "would be:"
msgstr "以下のようになるだろう:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:89
#, no-wrap
msgid ""
"public class EmacsSomething\n"
"{\n"
"  public static int\n"
"  multiplyAWithBAndThenAddC (int a, int b, int c)\n"
"  {\n"
"    return a * b + c;\n"
"  }\n"
"};\n"
msgstr ""
"```java\n"
"public class EmacsSomething\n"
"{\n"
"  public static int\n"
"  multiplyAWithBAndThenAddC (int a, int b, int c)\n"
"  {\n"
"    return a * b + c;\n"
"  }\n"
"};\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:91
msgid "Then, instead of calling:"
msgstr "以下のようなCの呼び出しは:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:93 emacs-30/admin/notes/java_editable:99
msgid "int foo;"
msgstr ""
"```c_or_java\n"
"int foo;"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:95
msgid "foo = multiply_a_with_b_then_add_c (1, 2, 3);"
msgstr ""
"foo = multiply_a_with_b_then_add_c (1, 2, 3);\n"
"```"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:101
msgid "foo = EmacsSomething.multiplyAWithBAndThenAddC (1, 2, 3);"
msgstr ""
"```java\n"
"foo = EmacsSomething.multiplyAWithBAndThenAddC (1, 2, 3);\n"
"```"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:105
msgid "In Java, ``static'' does not mean that the function is only used within its compilation unit! Instead, the ``private'' qualifier is used to mean more or less the same thing:"
msgstr "Javaでの`static`はその関数が関数のコンパイル単位でのみ使用されるという意味にはならない! ほぼ同じことを表すためには、かわりに`private`が使用される。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:111
#, no-wrap
msgid ""
"static void\n"
"this_procedure_is_only_used_within_this_file (void)\n"
"{\n"
"  do_something ();\n"
"}\n"
msgstr ""
"```c\n"
"static void\n"
"this_procedure_is_only_used_within_this_file (void)\n"
"{\n"
"  do_something ();\n"
"}\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:113
msgid "becomes"
msgstr "上記は以下のようになるだろう"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:119
#, no-wrap
msgid ""
"public class EmacsSomething\n"
"{\n"
"  private static void\n"
"  thisProcedureIsOnlyUsedWithinThisClass ()\n"
"  {\n"
msgstr ""
"```java\n"
"public class EmacsSomething\n"
"{\n"
"  private static void\n"
"  thisProcedureIsOnlyUsedWithinThisClass ()\n"
"  {\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:122
#, no-wrap
msgid ""
"  }\n"
"}\n"
msgstr ""
"  }\n"
"}\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:125
msgid "the other kind are called ``constructors''.  They are functions that must be called to allocate memory to hold a class:"
msgstr "他にも`constructor` (コンストラクター)と呼ばれるものがある。これはクラスをメモリー上に割り当てるために呼び出さなければならない関数のことだ:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:129
#, no-wrap
msgid ""
"public class EmacsFoo\n"
"{\n"
"  int bar;\n"
msgstr ""
"```java\n"
"public class EmacsFoo\n"
"{\n"
"  int bar;\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:136
#, no-wrap
msgid ""
"  public\n"
"  EmacsFoo (int tokenA, int tokenB)\n"
"  {\n"
"    bar = tokenA + tokenB;\n"
"  }\n"
"}\n"
msgstr ""
"  public\n"
"  EmacsFoo (int tokenA, int tokenB)\n"
"  {\n"
"    bar = tokenA + tokenB;\n"
"  }\n"
"}\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:138
msgid "now, the following statement:"
msgstr "そして以下のような文として呼び出される:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:140
msgid "EmacsFoo foo;"
msgstr ""
"```java\n"
"EmacsFoo foo;"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:142
msgid "foo = new EmacsFoo (1, 2);"
msgstr ""
"foo = new EmacsFoo (1, 2);\n"
"```"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:144
msgid "becomes more or less equivalent to the following C code:"
msgstr "以下はほぼ同じことを行うCコード:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:149
#, no-wrap
msgid ""
"struct emacs_foo\n"
"{\n"
"  int bar;\n"
"};\n"
msgstr ""
"```C\n"
"struct emacs_foo\n"
"{\n"
"  int bar;\n"
"};\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:154
#, no-wrap
msgid ""
"struct emacs_foo *\n"
"make_emacs_foo (int token_a, int token_b)\n"
"{\n"
"  struct emacs_foo *foo;\n"
msgstr ""
"struct emacs_foo *\n"
"make_emacs_foo (int token_a, int token_b)\n"
"{\n"
"  struct emacs_foo *foo;\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:157
#, no-wrap
msgid ""
"  foo = xmalloc (sizeof *foo);\n"
"  foo->bar = token_a + token_b;\n"
msgstr ""
"  foo = xmalloc (sizeof *foo);\n"
"  foo->bar = token_a + token_b;\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:160
#, no-wrap
msgid ""
"  return foo;\n"
"}\n"
msgstr ""
"  return foo;\n"
"}\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:162
msgid "/* ... */"
msgstr "/* ... */"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:164
msgid "struct emacs_foo *foo;"
msgstr "struct emacs_foo *foo;"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:166
msgid "foo = make_emacs_foo (1, 2);"
msgstr ""
"foo = make_emacs_foo (1, 2);\n"
"```"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:169
msgid "A class may have any number of constructors, or no constructors at all, in which case the compiler inserts an empty constructor."
msgstr "クラスは任意の個数のconstructorをもったり、constructorなしでもよい(コンパイラーが空のconstructorを挿入する)。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:173
msgid "Sometimes, you will see Java code that looks like this:"
msgstr "以下のようなJavaコードを目にすることもあるだろう:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:183
#, no-wrap
msgid ""
"    allFiles = filesDirectory.listFiles (new FileFilter () {\n"
"\t@Override\n"
"\tpublic boolean\n"
"\taccept (File file)\n"
"\t{\n"
"\t  return (!file.isDirectory ()\n"
"\t\t  && file.getName ().endsWith (\".pdmp\"));\n"
"\t}\n"
"      });\n"
msgstr ""
"```java\n"
"      allFiles = filesDirectory.listFiles (new FileFilter () {\n"
"\t@Override\n"
"\tpublic boolean\n"
"\taccept (File file)\n"
"\t{\n"
"\t  return (!file.isDirectory ()\n"
"\t\t  && file.getName ().endsWith (\".pdmp\"));\n"
"\t}\n"
"      });\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:188
msgid "This is Java's version of GCC's nested function extension.  The major difference is that the nested function may still be called even after it goes out of scope, and always retains a reference to the class and local variables around where it was called."
msgstr "これ程GCCの関数内関数拡張(nested function extension)のJavaバージョンだ。関数内関数はスコープ外からも呼び出せるかもしれないし、呼び出された前後のクラスやlocal変数への参照を常に保持する点が主な違い。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:191
msgid "Being an object-oriented language, Java also allows defining that a class ``extends'' another class.  The following C code:"
msgstr "Javaはオブジェクト指向言語なので、あるクラスが他のクラスを\"拡張\"することもできる。以下のCコードは:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:196
#, no-wrap
msgid ""
"struct a\n"
"{\n"
"  long thirty_two;\n"
"};\n"
msgstr ""
"```C\n"
"struct a\n"
"{\n"
"  long thirty_two;\n"
"};\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:202
#, no-wrap
msgid ""
"struct b\n"
"{\n"
"  struct a a;\n"
"  long long sixty_four;\n"
"};\n"
msgstr ""
"struct b\n"
"{\n"
"  struct a a;\n"
"  long long sixty_four;\n"
"};\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:204
msgid "extern void do_something (struct a *);"
msgstr "extern void do_something (struct a *);"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:210
#, no-wrap
msgid ""
"void\n"
"my_function (struct b *b)\n"
"{\n"
"  do_something (&b->a);\n"
"}\n"
msgstr ""
"void\n"
"my_function (struct b *b)\n"
"{\n"
"  do_something (&b->a);\n"
"}\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:213
msgid "is roughly equivalent to the following Java code, split into two files:"
msgstr "これは以下の2ファイルに分割されたJavaコードとおおよそ同じだ:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:215
#, no-wrap
msgid "  A.java\n"
msgstr ""
"```java\n"
"  A.java\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:219
#, no-wrap
msgid ""
"public class A\n"
"{\n"
"  int thirtyTwo;\n"
msgstr ""
"public class A\n"
"{\n"
"  int thirtyTwo;\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:226
#, no-wrap
msgid ""
"  public void\n"
"  doSomething ()\n"
"  {\n"
"    etcEtcEtc ();\n"
"  }\n"
"};\n"
msgstr ""
"  public void\n"
"  doSomething ()\n"
"  {\n"
"    etcEtcEtc ();\n"
"  }\n"
"};\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:228
#, no-wrap
msgid "  B.java\n"
msgstr "  B.java\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:232
#: emacs-30/admin/notes/java_editable:249
#, no-wrap
msgid ""
"public class B extends A\n"
"{\n"
"  long sixty_four;\n"
msgstr ""
"public class B extends A\n"
"{\n"
"  long sixty_four;\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:239
#, no-wrap
msgid ""
"  public static void\n"
"  myFunction (B b)\n"
"  {\n"
"    b.doSomething ();\n"
"  }\n"
"}\n"
msgstr ""
"  public static void\n"
"  myFunction (B b)\n"
"  {\n"
"    b.doSomething ();\n"
"  }\n"
"}\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:242
msgid "the Java runtime has transformed the call to ``b.doSomething'' to ``((A) b).doSomething''."
msgstr "Javaランタイムが呼び出し`b.doSomething`を`((A) b).doSomething`の変換したのだ。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:245
msgid "However, Java also allows overriding this behavior, by specifying the @Override keyword:"
msgstr "ただしJavaでは@Overrideキーワードを指定して、動作をオーバーライドすることもできる:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:258
#, no-wrap
msgid ""
"  @Override\n"
"  public void\n"
"  doSomething ()\n"
"  {\n"
"    Something.doSomethingTwo ();\n"
"    super.doSomething ();\n"
"  }\n"
"}\n"
msgstr ""
"```java\n"
"  @Override\n"
"  public void\n"
"  doSomething ()\n"
"  {\n"
"    Something.doSomethingTwo ();\n"
"    super.doSomething ();\n"
"  }\n"
"}\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:263
msgid "now, any call to ``doSomething'' on a ``B'' created using ``new B ()'' will end up calling ``Something.doSomethingTwo'', before calling back to ``A.doSomething''.  This override also applies in reverse; that is to say, even if you write:"
msgstr "これで`new B ()`を用いて作成した`B`の`doSomething`にたいするすべての呼び出しは、`A.doSomething`をコールバックする前に`Something.doSomethingTwo`呼び出しを終えるようになった。このオーバーライドは反対方向にたいしても適用される。つまりたとえ以下のように記述したとしても:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:265
#, no-wrap
msgid "  ((A) b).doSomething ();\n"
msgstr ""
"```java\n"
"  ((A) b).doSomething ();\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:268
msgid "B's version of doSomething will still be called, if ``b'' was created using ``new B ()''."
msgstr "たとえ`new B ()`で`b`を作成した場合でも、BバージョンのdoSomethingは依然として呼び出されるのだ。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:271
msgid "This mechanism is used extensively throughout the Java language and Android windowing APIs."
msgstr "これはJava言語およびAndroidのウィンドウ化API全般を通じて、広範囲で使用されているメカニズムである。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:273
msgid "Elsewhere, you will encounter Java code that defines arrays:"
msgstr "どこかで配列を定義するJavaコード出会うかもしれない:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:280
#, no-wrap
msgid ""
"public class EmacsFrobinicator\n"
"{\n"
"  public static void\n"
"  emacsFrobinicate (int something)\n"
"  {\n"
"    int[] primesFromSomething;\n"
msgstr ""
"```java\n"
"public class EmacsFrobinicator\n"
"{\n"
"  public static void\n"
"  emacsFrobinicate (int something)\n"
"  {\n"
"    int[] primesFromSomething;\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:285
#, no-wrap
msgid ""
"    primesFromSomething = new int[numberOfPrimes];\n"
"    /* ... */\n"
"  }\n"
"}\n"
msgstr ""
"    primesFromSomething = new int[numberOfPrimes];\n"
"    /* ... */\n"
"  }\n"
"}\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:290
msgid "Java arrays are similar to C arrays in that they can not grow.  But they are very much unlike C arrays in that they are always references (as opposed to decaying into pointers in only some situations), and contain information about their length."
msgstr "拡張できないという点においては、Javaの配列とCの配列は似ている。しかし(ある状況下においてのみポインタに変化するのではなく)常にリファレンス(reference: 参照)であること、長さの情報を含んでいる点では、Cの配列とは大きく異なる。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:293
msgid "If another function named ``frobinicate1'' takes an array as an argument, then it need not take the length of the array."
msgstr "``frobinicate1''という引数として配列を受け取る別の関数の場合には、配列の長さを受け取る必要はない。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:295
msgid "Instead, it may simply iterate over the array like so:"
msgstr "以下のように配列にたいして単に繰り返し処理することができるからだ:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:297
msgid "int i, k;"
msgstr ""
"```java\n"
"int i, k;"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:301
#, no-wrap
msgid ""
"for (i = 0; i < array.length; ++i)\n"
"  {\n"
"    k = array[i];\n"
msgstr ""
"for (i = 0; i < array.length; ++i)\n"
"  {\n"
"    k = array[i];\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:304
#, no-wrap
msgid ""
"    Whatever.doSomethingWithK (k);\n"
"  }\n"
msgstr ""
"    Whatever.doSomethingWithK (k);\n"
"  }\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:308
msgid "The syntax used to define arrays is also slightly different.  As arrays are always references, there is no way for you to tell the runtime to allocate an array of size N in a structure (class.)"
msgstr "配列の定義に用いる構文も若干異なる。配列は常にリファレンスなので、structure(やclass)にサイズNの配列を割り当てるようランタイムに指示する。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:312
msgid "Instead, if you need an array of that size, you must declare a field with the type of the array, and allocate the array inside the class's constructor, like so:"
msgstr "配列のサイズが必要な場合とはその配列のタイプでフィールドを宣言して、以下のようにクラスのconstructor内部で配列を割り当てなければならない:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:316
#, no-wrap
msgid ""
"public class EmacsArrayContainer\n"
"{\n"
"  public int[] myArray;\n"
msgstr ""
"```java\n"
"public class EmacsArrayContainer\n"
"{\n"
"  public int[] myArray;\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:323
#, no-wrap
msgid ""
"  public\n"
"  EmacsArrayContainer ()\n"
"  {\n"
"    myArray = new array[10];\n"
"  }\n"
"}\n"
msgstr ""
"  public\n"
"  EmacsArrayContainer ()\n"
"  {\n"
"    myArray = new array[10];\n"
"  }\n"
"}\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:325
msgid "while in C, you could just have written:"
msgstr "Cでは以下のように記述するか:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:330
#, no-wrap
msgid ""
"struct emacs_array_container\n"
"{\n"
"  int my_array[10];\n"
"};\n"
msgstr ""
"```C\n"
"struct emacs_array_container\n"
"{\n"
"  int my_array[10];\n"
"};\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:332
msgid "or, possibly even better,"
msgstr "こちらのほうがよいかもしれない"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:334
msgid "typedef int emacs_array_container[10];"
msgstr ""
"```C\n"
"typedef int emacs_array_container[10];\n"
"```"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:336
msgid "Alas, Java has no equivalent of `typedef'."
msgstr "悲しいかな、Javaには`typedef`の等価物が存在しないのだ。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:342
msgid "Like in C, Java string literals are delimited by double quotes.  Unlike C, however, strings are not NULL-terminated arrays of characters, but a distinct type named ``String''.  They store their own length, characters in Java's 16-bit ``char'' type, and are capable of holding NULL bytes."
msgstr "Javaの文字列リテラルは、Cの場合と同じようにダブルクォートで区切る。ただしCと異なるのは文字列がNULL終端された文字の配列ではなく、`String`と呼ばれる別個のタイプだという点だ。これは独自に長さを保持しておりJavaの16ビット`char`タイプ、それにNULLバイトを保持することもできる。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:344
msgid "Instead of writing:"
msgstr "以下のように:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:348
msgid "wchar_t character; extern char *s; size_t s;"
msgstr ""
"```C\n"
"wchar_t character; extern char *s; size_t s;"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:351
#, no-wrap
msgid ""
"  for (/* determine n, s in a loop.  */)\n"
"    s += mbstowc (&character, s, n);\n"
msgstr ""
"  for (/* determine n, s in a loop.  */)\n"
"    s += mbstowc (&character, s, n);\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:353
msgid "or:"
msgstr "あるいは:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:355
msgid "const char *byte;"
msgstr ""
"```C\n"
"const char *byte;"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:358
#, no-wrap
msgid ""
"for (byte = my_string; *byte; ++byte)\n"
"  /* do something with *byte.  */;\n"
msgstr ""
"for (byte = my_string; *byte; ++byte)\n"
"  /* do something with *byte.  */;\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:360
msgid "or perhaps even:"
msgstr "あるいは以下もありかもしれない:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:363
msgid "size_t length, i; char foo;"
msgstr ""
"```C\n"
"size_t length, i; char foo;"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:365
msgid "length = strlen (my_string);"
msgstr "length = strlen (my_string);"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:368
#, no-wrap
msgid ""
"for (i = 0; i < length; ++i)\n"
"  foo = my_string[i];\n"
msgstr ""
"for (i = 0; i < length; ++i)\n"
"  foo = my_string[i];\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:370
msgid "you write:"
msgstr "これらを以下のように記述できるのだ:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:373
msgid "char foo; int i;"
msgstr ""
"```java\n"
"char foo; int i;"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:376
#, no-wrap
msgid ""
"for (i = 0; i < myString.length (); ++i)\n"
"  foo = myString.charAt (0);\n"
msgstr ""
"for (i = 0; i < myString.length (); ++i)\n"
"  foo = myString.charAt (0);\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:380
msgid "Java also has stricter rules on what can be used as a truth value in a conditional.  While in C, any non-zero value is true, Java requires that every truth value be of the boolean type ``boolean''."
msgstr "Javaには条件判定において何を真値として使用できるかについての厳格なルールもある。Cでのtrueは任意の非0値だが、Javaにおける真値はすべてブーリアン型``boolean''であることが要求される。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:382
msgid "What this means is that instead of simply writing:"
msgstr "これは何を意味するのか? たとえばfooは1か0、barはNULLあるいは何かへのポインターであるような場合には、以下のようにシンプルに記述するかわりに:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:384
#, no-wrap
msgid "  if (foo || bar)\n"
msgstr ""
"```\n"
"  if (foo || bar)\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:387
msgid "where foo can either be 1 or 0, and bar can either be NULL or a pointer to something, you must explicitly write:"
msgstr "Javaでは:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:389
#, no-wrap
msgid "  if (foo != 0 || bar != null)\n"
msgstr ""
"```java\n"
"  if (foo != 0 || bar != null)\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:391
msgid "in Java."
msgstr "のように明示的に記述しなければならないことを意味する:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:393
msgid "JAVA NATIVE INTERFACE"
msgstr "# JAVA NATIVE INTERFACE"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:395
msgid "Java also provides an interface for C code to interface with Java."
msgstr "JavaはJavaとインターフェイスするためのCコード用のインターフェイスも提供している。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:398
msgid "C functions exported from a shared library become static Java functions within a class, like so:"
msgstr "共有ライブラリーからエクスポートされるC関数は、、以下のようなJavaのクラスのstatic関数になります:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:404
#, no-wrap
msgid ""
"public class EmacsNative\n"
"{\n"
"  /* Obtain the fingerprint of this build of Emacs.  The fingerprint\n"
"     can be used to determine the dump file name.  */\n"
"  public static native String getFingerprint ();\n"
msgstr ""
"```java\n"
"public class EmacsNative\n"
"{\n"
"  /* このビルドのEmacsのfingerprintを取得\n"
"     fingerprintはダンプファイル名取得に用いられる */\n"
"  public static native String getFingerprint ();\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:406
#, no-wrap
msgid "  /* Set certain parameters before initializing Emacs.\n"
msgstr "  /* Emacs初期化前に特定のパラメーターをセット\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:410
#, no-wrap
msgid ""
"     assetManager must be the asset manager associated with the\n"
"     context that is loading Emacs.  It is saved and remains for the\n"
"     remainder the lifetime of the Emacs process.\n"
msgstr ""
"     assetManagerはEmacsロードのコンテキストで割り当てられたアセット\n"
"     マネージャーでなければならない。これは保存されてEmacsプロセスの\n"
"     ライフタイムのリマインダーとして残留する\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:413
#, no-wrap
msgid ""
"     filesDir must be the package's data storage location for the\n"
"     current Android user.\n"
msgstr ""
"     filesDirはAndroidのカレントユーザーのパッケージ用データストレージ\n"
"     でなければならない\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:416
#, no-wrap
msgid ""
"     libDir must be the package's data storage location for native\n"
"     libraries.\t It is used as PATH.\n"
msgstr ""
"     libDirはパッケージのネイティブライブラリー用データストレージ\n"
"     でなければならない。これがPATHとして用いられる\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:419
#, no-wrap
msgid ""
"     cacheDir must be the package's cache directory.  It is used as\n"
"     the `temporary-file-directory'.\n"
msgstr ""
"     cacheDirパッケージのキャッシュディレクトリーでなければならない\n"
"     これが`temporary-file-directory`として使用される\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:422
#, no-wrap
msgid ""
"     pixelDensityX and pixelDensityY are the DPI values that will be\n"
"     used by Emacs.\n"
msgstr "     pixelDensityXとpixelDensityYはEmacsが用いるDPI値\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:425
#, no-wrap
msgid ""
"     classPath must be the classpath of this app_process process, or\n"
"     NULL.\n"
msgstr "     classPathはこのapp_processプロセスのclasspath、またはNULL\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:436
#, no-wrap
msgid ""
"     emacsService must be the EmacsService singleton, or NULL.\t*/\n"
"  public static native void setEmacsParams (AssetManager assetManager,\n"
"\t\t\t\t\t    String filesDir,\n"
"\t\t\t\t\t    String libDir,\n"
"\t\t\t\t\t    String cacheDir,\n"
"\t\t\t\t\t    float pixelDensityX,\n"
"\t\t\t\t\t    float pixelDensityY,\n"
"\t\t\t\t\t    String classPath,\n"
"\t\t\t\t\t    EmacsService emacsService);\n"
"}\n"
msgstr ""
"     emacsServiceはEmacsServiceシングルトン、またはNULL */\n"
"  public static native void setEmacsParams (AssetManager assetManager,\n"
"\t\t\t\t\t    String filesDir,\n"
"\t\t\t\t\t    String libDir,\n"
"\t\t\t\t\t    String cacheDir,\n"
"\t\t\t\t\t    float pixelDensityX,\n"
"\t\t\t\t\t    float pixelDensityY,\n"
"\t\t\t\t\t    String classPath,\n"
"\t\t\t\t\t    EmacsService emacsService);\n"
"}\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:439
msgid "Where the corresponding C functions are located in android.c, and loaded by the special invocation:"
msgstr "これに対応するC関数をandroid.cに配置、それが特別な呼び出しによってロードされる:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:444
#, no-wrap
msgid ""
"  static\n"
"  {\n"
"    System.loadLibrary (\"emacs\");\n"
"  };\n"
msgstr ""
"```C\n"
"  static\n"
"  {\n"
"    System.loadLibrary (\"emacs\");\n"
"  };\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:447
msgid "where ``static'' defines a section of code which will be run upon the object (containing class) being loaded.  This is like:"
msgstr "ここで`static`はオブジェクト(classも含む)のロード時に実行されるコードのセクションを定義する。共有オブジェクトのconstructorをサポートするシステムであれば:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:449
#, no-wrap
msgid "  __attribute__ ((constructor))\n"
msgstr ""
"```C\n"
"  __attribute__ ((constructor))\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:451
msgid "on systems where shared object constructors are supported."
msgstr "のようになるだろう。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:454
msgid "See http://docs.oracle.com/en/java/javase/19/docs/specs/jni/intro.html for more details."
msgstr "詳細についてはhttp://docs.oracle.com/en/java/javase/19/docs/specs/jni/intro.htmlを参照のこと。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:458
msgid "OVERVIEW OF ANDROID"
msgstr "# OVERVIEW OF ANDROID"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:462
msgid "When the Android system starts an application, it does not actually call the application's ``main'' function.  It may not even start the application's process if one is already running."
msgstr "Androidシステムがアプリケーションを開始する際には、実際にそのアプリケーションの`main`を呼び出す訳ではない。もしもすでに実行中であれば、アプリケーションプロセスの開始すら行わないかもしれない。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:468
msgid "Instead, Android is organized around components.  When the user opens the ``Emacs'' icon, the Android system looks up and starts the component associated with the ``Emacs'' icon.  In this case, the component is called an activity, and is declared in the AndroidManifest.xml in this directory:"
msgstr "そのかわりにAndroidはコンポーネントを中心に構成されている。ユーザーが`Emacs`のアイコンをオープンすると、`Emacs`アイコンに関連付けられたコンポーネントをAndroidシステムが検索して開始処理を行う。この場合にはコンポーネントはactivityと呼ばれる。これはこのディレクトリーのAndroidManifest.xmlで宣言されている。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:480
#, no-wrap
msgid ""
"    <activity android:name=\"org.gnu.emacs.EmacsActivity\"\n"
"\t      android:launchMode=\"singleTop\"\n"
"\t      android:windowSoftInputMode=\"adjustResize\"\n"
"\t      android:exported=\"true\"\n"
"\t      android:configChanges=\"orientation|screenSize|screenLayout|keyboardHidden\">\n"
"      <intent-filter>\n"
"\t<action android:name=\"android.intent.action.MAIN\" />\n"
"\t<category android:name=\"android.intent.category.DEFAULT\" />\n"
"\t<category android:name=\"android.intent.category.LAUNCHER\" />\n"
"      </intent-filter>\n"
"    </activity>\n"
msgstr ""
"```xml\n"
"    <activity android:name=\"org.gnu.emacs.EmacsActivity\"\n"
"\t      android:launchMode=\"singleTop\"\n"
"\t      android:windowSoftInputMode=\"adjustResize\"\n"
"\t      android:exported=\"true\"\n"
"\t      android:configChanges=\"orientation|screenSize|screenLayout|keyboardHidden\">\n"
"      <intent-filter>\n"
"\t<action android:name=\"android.intent.action.MAIN\" />\n"
"\t<category android:name=\"android.intent.category.DEFAULT\" />\n"
"\t<category android:name=\"android.intent.category.LAUNCHER\" />\n"
"      </intent-filter>\n"
"    </activity>\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:484
msgid "This tells Android to start the activity defined in ``EmacsActivity'' (defined in org/gnu/emacs/EmacsActivity.java), a class extending the Android class ``Activity''."
msgstr "これはAndroidにたいして`EmacsActivity` (org/gnu/emacs/EmacsActivity.java)で定義されているactivity (Androidのクラス`Activity``を拡張するクラス)を開始するように指示する。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:487
msgid "To do so, the Android system creates an instance of ``EmacsActivity'' and the window system window associated with it, and eventually calls:"
msgstr "これによりAndroidシステムが`EmacsActivity`のインスタンスを作成、それにウィンドウシステムがウィンドウを関連付けて最終的には以下を呼び出す:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:489
#, no-wrap
msgid "  Activity activity;\n"
msgstr ""
"```java\n"
"  Activity activity;\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:491
#, no-wrap
msgid "  activity.onCreate (...);\n"
msgstr ""
"  activity.onCreate (...);\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:495
msgid "But which ``onCreate'' is really called? It is actually the ``onCreate'' defined in EmacsActivity.java, as it overrides the ``onCreate'' defined in Android's own Activity class:"
msgstr "しかし実際には、どの`onCreate`が呼び出されるのだろうか? というのも実際に`onCreate`はEmacsActivity.javaで定義されているが、これはAndroid自身のActivity内で定義されている`onCreate`をオーバーライドしたものだからだ:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:502
#, no-wrap
msgid ""
"  @Override\n"
"  public void\n"
"  onCreate (Bundle savedInstanceState)\n"
"  {\n"
"    FrameLayout.LayoutParams params;\n"
"    Intent intent;\n"
msgstr ""
"```java\n"
"  @Override\n"
"  public void\n"
"  onCreate (Bundle savedInstanceState)\n"
"  {\n"
"    FrameLayout.LayoutParams params;\n"
"    Intent intent;\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:505
msgid "Then, this is what happens step-by-step within the ``onCreate'' function:"
msgstr "この`onCreate`関数で何が行われていくのかをステップバイステップで追ってみよう:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:511
#, no-wrap
msgid ""
"    /* See if Emacs should be started with -Q.\t*/\n"
"    intent = getIntent ();\n"
"    EmacsService.needDashQ\n"
"      = intent.getBooleanExtra (\"org.gnu.emacs.START_DASH_Q\",\n"
"\t\t\t\tfalse);\n"
msgstr ""
"```java\n"
"    /* Emacsが-Qで開始されたのか確認    */\n"
"    intent = getIntent ();\n"
"    EmacsService.needDashQ\n"
"      = intent.getBooleanExtra (\"org.gnu.emacs.START_DASH_Q\",\n"
"\t\t\t\tfalse);\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:515
msgid "Here, Emacs obtains the intent (a request to start a component) which was used to start Emacs, and sets a special flag if it contains a request for Emacs to start with the ``-Q'' command-line argument."
msgstr "ここでEmacsは自身の開始に使用されたintent(コンポーネントを開始するためのリクエスト)を入手して、コマンドライン引数`-Q`でEmacsを開始するリクエストが含まれていたら、特別なフラグをセットする。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:517
#, no-wrap
msgid "    /* Set the theme to one without a title bar.  */\n"
msgstr ""
"```java\n"
"    /* タイトルバーなしのテーマをセット */\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:522
#, no-wrap
msgid ""
"    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH)\n"
"      setTheme (android.R.style.Theme_DeviceDefault_NoActionBar);\n"
"    else\n"
"      setTheme (android.R.style.Theme_NoTitleBar);\n"
msgstr ""
"    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH)\n"
"      setTheme (android.R.style.Theme_DeviceDefault_NoActionBar);\n"
"    else\n"
"      setTheme (android.R.style.Theme_NoTitleBar);\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:525
msgid "Next, Emacs sets an appropriate theme for the activity's associated window decorations."
msgstr "次にEmacsはこのactivityにたいして関連付けられたウィンドウ装飾(window decoration)にたいして、適切なテーマをセットする。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:528
#, no-wrap
msgid ""
"    params = new FrameLayout.LayoutParams (LayoutParams.MATCH_PARENT,\n"
"\t\t\t\t\t   LayoutParams.MATCH_PARENT);\n"
msgstr ""
"```java\n"
"    params = new FrameLayout.LayoutParams (LayoutParams.MATCH_PARENT,\n"
"\t\t\t\t\t   LayoutParams.MATCH_PARENT);\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:532
#, no-wrap
msgid ""
"    /* Make the frame layout.  */\n"
"    layout = new FrameLayout (this);\n"
"    layout.setLayoutParams (params);\n"
msgstr ""
"    /* フレームのレイアウトを作成       */\n"
"    layout = new FrameLayout (this);\n"
"    layout.setLayoutParams (params);\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:535
#, no-wrap
msgid ""
"    /* Set it as the content view.  */\n"
"    setContentView (layout);\n"
msgstr ""
"    /* content viewにそれをセット       */\n"
"    setContentView (layout);\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:538
msgid "Then, Emacs creates a ``FrameLayout'', a widget that holds a single other widget, and makes it the activity's ``content view''."
msgstr "それからEmacsは`FrameLayout` (別の単一のwidgetを保持するwidget)を作成して、そのactivityの`content view`にする。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:541
msgid "The activity itself is a ``FrameLayout'', so the ``layout parameters'' here apply to the FrameLayout itself, and not its children."
msgstr "activity自体が`FrameLayout`なので、ここで適用する`layout`パラメーターは子ではなくこのFrameLayout自体に適用される。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:544
#, no-wrap
msgid ""
"    /* Maybe start the Emacs service if necessary.  */\n"
"    EmacsService.startEmacsService (this);\n"
msgstr ""
"```java\n"
"    /* 必要ならEmacsサービスを開始するかもしれない      */\n"
"    EmacsService.startEmacsService (this);\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:548
msgid "And after that, Emacs calls the static function ``startEmacsService'', defined in the class ``EmacsService''.\tThis starts the Emacs service component if necessary."
msgstr "この後にEmacsはクラス`EmacsService`で定義されているstatic関数`startEmacsService`を呼び出す。これは必要ならEmacsサービスのコンポーネントを開始する部分だ。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:551
#, no-wrap
msgid ""
"    /* Add this activity to the list of available activities.  */\n"
"    EmacsWindowAttachmentManager.MANAGER.registerWindowConsumer (this);\n"
msgstr ""
"```java\n"
"    /* 利用可能なactivityリストにこのactivityを追加     */\n"
"    EmacsWindowAttachmentManager.MANAGER.registerWindowConsumer (this);\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:553
#, no-wrap
msgid "    super.onCreate (savedInstanceState);\n"
msgstr ""
"    super.onCreate (savedInstanceState);\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:556
msgid "Finally, Emacs registers that this activity is now ready to receive top-level frames (windows) created from Lisp."
msgstr "そしてついにこのactivityが、Lispから作成されたトップレベルのフレーム(ウィンドウ)を受け取る準備が整ったことをEmacsが登録するのだ。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:560
msgid "Activities come and go, but Emacs has to stay running in the mean time.  Thus, Emacs also defines a ``service'', which is a long-running component that the Android system allows to run in the background."
msgstr "activityは来たり去りゆくが、その間はEmacsが実行し続けている必要がある。したがってEmacsはバックグラウンドでの実行をAndroidシステムが許可するような、長時間実行される`service`としても定義する必要がある。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:562
msgid "Let us go back and review the definition of ``startEmacsService'':"
msgstr "では戻って`startEmacsService`の定義をレビューしよう:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:579
#, no-wrap
msgid ""
"  public static void\n"
"  startEmacsService (Context context)\n"
"  {\n"
"    if (EmacsService.SERVICE == null)\n"
"      {\n"
"\tif (Build.VERSION.SDK_INT < Build.VERSION_CODES.O)\n"
"\t  /* Start the Emacs service now.  */\n"
"\t  context.startService (new Intent (context,\n"
"\t\t\t\t\t    EmacsService.class));\n"
"\telse\n"
"\t  /* Display the permanent notification and start Emacs as a\n"
"\t     foreground service.  */\n"
"\t  context.startForegroundService (new Intent (context,\n"
"\t\t\t\t\t\t      EmacsService.class));\n"
"      }\n"
"  }\n"
msgstr ""
"```java\n"
"  public static void\n"
"  startEmacsService (Context context)\n"
"  {\n"
"    if (EmacsService.SERVICE == null)\n"
"      {\n"
"\tif (Build.VERSION.SDK_INT < Build.VERSION_CODES.O)\n"
"\t  /* Emacsサービスを開始  */\n"
"\t  context.startService (new Intent (context,\n"
"\t\t\t\t\t    EmacsService.class));\n"
"\telse\n"
"\t  /* 永続的な通知を表示して、フォアグラウンドサービスとして\n"
"\t     Emacsを開始する    */\n"
"\t  context.startForegroundService (new Intent (context,\n"
"\t\t\t\t\t\t      EmacsService.class));\n"
"      }\n"
"  }\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:584
msgid "If ``EmacsService.SERVICE'' does not yet exist, what this does is to tell the ``context'' (the equivalent of an Xlib Display *) to start a service defined by the class ``EmacsService''.\tEventually, this results in ``EmacsService.onCreate'' being called:"
msgstr "これが行うのは`EmacsService.SERVICE`がまだ存在しなければ、`context`(`Xlib Display *`と等価)にたいしてクラス`EmacsService`で定義されたサービスの開始を伝えることだ:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:594
#, no-wrap
msgid ""
"  @Override\n"
"  public void\n"
"  onCreate ()\n"
"  {\n"
"    AssetManager manager;\n"
"    Context app_context;\n"
"    String filesDir, libDir, cacheDir, classPath;\n"
"    double pixelDensityX;\n"
"    double pixelDensityY;\n"
msgstr ""
"```java\n"
"  @Override\n"
"  public void\n"
"  onCreate ()\n"
"  {\n"
"    AssetManager manager;\n"
"    Context app_context;\n"
"    String filesDir, libDir, cacheDir, classPath;\n"
"    double pixelDensityX;\n"
"    double pixelDensityY;\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:596
msgid "Here is what this function does, step-by-step:"
msgstr "ここでは関数が何を行うかステップバイステップで追ってみよう:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:598
#, no-wrap
msgid "    SERVICE = this;\n"
msgstr ""
"```java\n"
"    SERVICE = this;\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:601
msgid "First, it sets the special static variable ``SERVICE'' to ``this'', which is a pointer to the ``EmacsService' object that was created."
msgstr "まず最初に`this` (作成された`EmacsServic`オブジェクトへのポインター)にたいして、特別なstatic変数`SERVICE`をセットしている。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:603
#, no-wrap
msgid "    handler = new Handler (Looper.getMainLooper ());\n"
msgstr ""
"```java\n"
"    handler = new Handler (Looper.getMainLooper ());\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:607
msgid "Next, it creates a ``Handler'' object for the ``main looper''.  This is a helper structure which allows executing code on the Android user interface thread."
msgstr "次に`main looper`にたいして`Handler`オブジェクトを作成した。これはAndroid のユーザーインターフェイススレッドでコードを実行できるようにするためのヘルパーstructureだ。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:613
#, no-wrap
msgid ""
"    manager = getAssets ();\n"
"    app_context = getApplicationContext ();\n"
"    metrics = getResources ().getDisplayMetrics ();\n"
"    pixelDensityX = metrics.xdpi;\n"
"    pixelDensityY = metrics.ydpi;\n"
msgstr ""
"```java\n"
"    manager = getAssets ();\n"
"    app_context = getApplicationContext ();\n"
"    metrics = getResources ().getDisplayMetrics ();\n"
"    pixelDensityX = metrics.xdpi;\n"
"    pixelDensityY = metrics.ydpi;\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:615
msgid "Finally, it obtains:"
msgstr "最後に入手したのは:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:618
#, no-wrap
msgid ""
"  - the asset manager, which is used to retrieve assets packaged\n"
"    into the Emacs application package.\n"
msgstr "- アセットマネージャー :: Emacsアプリケーションパッケージにパッケージされたアセットの取得に使用\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:621
#, no-wrap
msgid ""
"  - the application context, used to obtain application specific\n"
"    information.\n"
msgstr "- application context ：： アプリケーション固有の情報用に使用\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:624
#, no-wrap
msgid ""
"  - the display metrics, and from them, the X and Y densities in dots\n"
"    per inch.\n"
msgstr "- ディスプレイメトリクス :: ドット単位で表したXおよびYの密度\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:626
msgid "Then, inside a ``try'' block:"
msgstr "では`try`ブロックの内側だ:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:634
#, no-wrap
msgid ""
"    try\n"
"      {\n"
"\t/* Configure Emacs with the asset manager and other necessary\n"
"\t   parameters.\t*/\n"
"\tfilesDir = app_context.getFilesDir ().getCanonicalPath ();\n"
"\tlibDir = getLibraryDirectory ();\n"
"\tcacheDir = app_context.getCacheDir ().getCanonicalPath ();\n"
msgstr ""
"```java\n"
"      try\n"
"      {\n"
"\t/* アセットマネージャー他必要なパラメーターとともに\n"
"\t   Emacsを構成する      */\n"
"\tfilesDir = app_context.getFilesDir ().getCanonicalPath ();\n"
"\tlibDir = getLibraryDirectory ();\n"
"\tcacheDir = app_context.getCacheDir ().getCanonicalPath ();\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:637
msgid "It obtains the names of the Emacs home, shared library, and temporary file directories."
msgstr "これがEmacsのホーム、共有ライブラリー、一時ファイル用のディレクトリー名を取得する。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:642
#, no-wrap
msgid ""
"\t/* Now provide this application's apk file, so a recursive\n"
"\t   invocation of app_process (through android-emacs) can\n"
"\t   find EmacsNoninteractive.  */\n"
"\tclassPath = getApkFile ();\n"
msgstr ""
"```java\n"
"        /* では(android-emacsを介して)app_processを再帰的に呼び出す\n"
"           ことによってEmacsNoninteractiveを見つけられるように、この\n"
"           アプリケーションのapkファイルを提供する      */\n"
"\tclassPath = getApkFile ();\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:644
msgid "The name of the Emacs application package."
msgstr "以下はEmacsのアプリケーションパッケージ名。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:647
#, no-wrap
msgid ""
"\tLog.d (TAG, \"Initializing Emacs, where filesDir = \" + filesDir\n"
"\t       + \", libDir = \" + libDir + \", and classPath = \" + classPath);\n"
msgstr ""
"```java\n"
"        Log.d (TAG, \"Initializing Emacs, where filesDir = \" + filesDir\n"
"\t       + \", libDir = \" + libDir + \", and classPath = \" + classPath);\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:650
msgid "Prints a debug message to the Android system log with this information."
msgstr "そしてこの情報とともにデバッグメッセージをAndroidシステムのログにプリントする。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:655
#, no-wrap
msgid ""
"\tEmacsNative.setEmacsParams (manager, filesDir, libDir,\n"
"\t\t\t\t    cacheDir, (float) pixelDensityX,\n"
"\t\t\t\t    (float) pixelDensityY,\n"
"\t\t\t\t    classPath, this);\n"
msgstr ""
"```java\n"
"        EmacsNative.setEmacsParams (manager, filesDir, libDir,\n"
"\t\t\t\t    cacheDir, (float) pixelDensityX,\n"
"\t\t\t\t    (float) pixelDensityY,\n"
"\t\t\t\t    classPath, this);\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:658
msgid "And calls the native function ``setEmacsParams'' (defined in android.c) to configure Emacs with this information."
msgstr "次にこの情報でEmacsを構成するために、(android.cで定義されている)ネイティブ関数`setEmacsParams`を呼び出す。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:662
#, no-wrap
msgid ""
"\t/* Start the thread that runs Emacs.  */\n"
"\tthread = new EmacsThread (this, needDashQ);\n"
"\tthread.start ();\n"
msgstr ""
"```java\n"
"        /* Emacsを実行するスレッドを開始        */\n"
"\tthread = new EmacsThread (this, needDashQ);\n"
"\tthread.start ();\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:665
msgid "Then, it allocates an ``EmacsThread'' object, and starts that thread.  Inside that thread is where Emacs's C code runs."
msgstr "その後は`EmacsThread`オブジェクトのアロケートを行う。このスレッドの内側こそが、EmacsのCコードが実行される場所なのだ。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:671
#, no-wrap
msgid ""
"      }\n"
"    catch (IOException exception)\n"
"      {\n"
"\tEmacsNative.emacsAbort ();\n"
"\treturn;\n"
msgstr ""
"```java\n"
"      }\n"
"    catch (IOException exception)\n"
"      {\n"
"\tEmacsNative.emacsAbort ();\n"
"\treturn;\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:674
msgid "And here is the purpose of the ``try'' block.  Functions related to file names in Java will signal errors of various types upon failure."
msgstr "そしてここに`try`ブロックの目的がある。Javaのファイル名に関する関数は、失敗の際にはさまざまなタイプのエラーをシグナルすることになるだろう。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:679
msgid "This ``catch'' block means that the Java virtual machine will abort execution of the contents of the ``try'' block as soon as an error of type ``IOException'' is encountered, and begin executing the contents of the ``catch'' block."
msgstr "この`catch`ブロックは`IOException`タイプのエラーに遭遇次第、Java仮想マシンが`try`ブロック内のコード実行をabortさせて、`catch`ブロック内のコードの実行を開始することを意味する。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:685
#, no-wrap
msgid ""
"Any failure of that type here is a crash, and\n"
"``EmacsNative.emacsAbort'' is called to quickly abort the process to\n"
"get a useful backtrace.\n"
"      }\n"
"  }\n"
msgstr ""
"上記タイプの任意の失敗によってcrashした場合には、有益なバックトレースが得られるように速やかに`EmacsNative.emacsAbort`を呼び出してプロセスをabortさせる。\n"
"```java\n"
"      }\n"
"  }\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:688
msgid "Now, let us look at the definition of the class ``EmacsThread'', found in org/gnu/emacs/EmacsThread.java:"
msgstr "今度はorg/gnu/emacs/EmacsThread.javaの`EmacsThread`の定義の番だ:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:693
#, no-wrap
msgid ""
"public class EmacsThread extends Thread\n"
"{\n"
"  /* Whether or not Emacs should be started -Q.\t */\n"
"  private boolean startDashQ;\n"
msgstr ""
"```java\n"
"public class EmacsThread extends Thread\n"
"{\n"
"  /* Emacsは-Qで開始されたのか  */\n"
"  private boolean startDashQ;\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:700
#, no-wrap
msgid ""
"  public\n"
"  EmacsThread (EmacsService service, boolean startDashQ)\n"
"  {\n"
"    super (\"Emacs main thread\");\n"
"    this.startDashQ = startDashQ;\n"
"  }\n"
msgstr ""
"  public\n"
"  EmacsThread (EmacsService service, boolean startDashQ)\n"
"  {\n"
"    super (\"Emacs main thread\");\n"
"    this.startDashQ = startDashQ;\n"
"  }\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:706
#, no-wrap
msgid ""
"  @Override\n"
"  public void\n"
"  run ()\n"
"  {\n"
"    String args[];\n"
msgstr ""
"  @Override\n"
"  public void\n"
"  run ()\n"
"  {\n"
"    String args[];\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:711
#, no-wrap
msgid ""
"    if (!startDashQ)\n"
"      args = new String[] { \"libandroid-emacs.so\", };\n"
"    else\n"
"      args = new String[] { \"libandroid-emacs.so\", \"-Q\", };\n"
msgstr ""
"    if (!startDashQ)\n"
"      args = new String[] { \"libandroid-emacs.so\", };\n"
"    else\n"
"      args = new String[] { \"libandroid-emacs.so\", \"-Q\", };\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:716
#, no-wrap
msgid ""
"    /* Run the native code now.\t */\n"
"    EmacsNative.initEmacs (args, EmacsApplication.dumpFileName);\n"
"  }\n"
"};\n"
msgstr ""
"    /* ここでネイティブコードを実行する */\n"
"    EmacsNative.initEmacs (args, EmacsApplication.dumpFileName);\n"
"  }\n"
"};\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:721
msgid "The class itself defines a single field, ``startDashQ'', a constructor with an unused argument of the type ``EmacsService'' (which is useful while debugging) and a flag ``startDashQ'', and a single function ``run'', overriding the same function in the class ``Thread''."
msgstr "このクラス自体は1つのフィールド`startDashQ`、使用されないタイプ``EmacsService`の引数(デバッグ中は便利)およびフラグ`startDashQ`を受け取るlconstructor、それに`Thread`クラスの同名の関数をオーバーライドする関数`run`を1つ定義している。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:724
msgid "When ``thread.start'' is called, the Java virtual machine creates a new thread, and then calls the function ``run'' within that thread."
msgstr "`thread.start`が呼び出されるとJava仮想マシンは新たにスレッドを作成してから、そのスレッド内で関数`run`を呼び出す。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:728
msgid "This function then computes a suitable argument vector, and calls ``EmacsNative.initEmacs'' (defined in android.c), which then calls a modified version of the regular Emacs ``main'' function."
msgstr "次にこの関数は適切なvector引数を算出して、(android.cで定義されている)`EmacsNative.initEmacs`、それにEmacsの通常の`main`関数の修正版を呼び出す。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:734
msgid "At that point, Emacs initialization proceeds as usual: Vinitial_window_system is set, loadup.el calls `normal-top-level', which calls `command-line', and finally `window-system-initialization', which initializes the `android' terminal interface as usual."
msgstr "この時点で通常のlEmacs初期化処理が行われる。Vinitial_window_systemをセット、loadup.elが`normal-top-level`呼び出し、これが`command-line'を呼び出して、最終的には通常の`android`端末を初期化する`window-system-initialization`が呼び出されるのだ。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:738
msgid "What happens here is the same as on other platforms.  Now, here is what happens when the initial frame is created: Fx_create_frame calls `android_create_frame_window' to create a top level window:"
msgstr "ここでは他のプラットフォームで行われるのと同様なことが起こっている。デフォルト初期フレーム作成時に何が起こっているのだろうか? まずトップレベルのウィンドウを作成するためにFx_create_frameが`android_create_frame_window`を呼び出す:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:744
#, no-wrap
msgid ""
"static void\n"
"android_create_frame_window (struct frame *f)\n"
"{\n"
"  struct android_set_window_attributes attributes;\n"
"  enum android_window_value_mask attribute_mask;\n"
msgstr ""
"```java\n"
"static void\n"
"android_create_frame_window (struct frame *f)\n"
"{\n"
"  struct android_set_window_attributes attributes;\n"
"  enum android_window_value_mask attribute_mask;\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:747
#, no-wrap
msgid ""
"  attributes.background_pixel = FRAME_BACKGROUND_PIXEL (f);\n"
"  attribute_mask = ANDROID_CW_BACK_PIXEL;\n"
msgstr ""
"  attributes.background_pixel = FRAME_BACKGROUND_PIXEL (f);\n"
"  attribute_mask = ANDROID_CW_BACK_PIXEL;\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:758
#, no-wrap
msgid ""
"  block_input ();\n"
"  FRAME_ANDROID_WINDOW (f)\n"
"    = android_create_window (FRAME_DISPLAY_INFO (f)->root_window,\n"
"\t\t\t     f->left_pos,\n"
"\t\t\t     f->top_pos,\n"
"\t\t\t     FRAME_PIXEL_WIDTH (f),\n"
"\t\t\t     FRAME_PIXEL_HEIGHT (f),\n"
"\t\t\t     attribute_mask, &attributes);\n"
"  unblock_input ();\n"
"}\n"
msgstr ""
"  block_input ();\n"
"  FRAME_ANDROID_WINDOW (f)\n"
"    = android_create_window (FRAME_DISPLAY_INFO (f)->root_window,\n"
"\t\t\t     f->left_pos,\n"
"\t\t\t     f->top_pos,\n"
"\t\t\t     FRAME_PIXEL_WIDTH (f),\n"
"\t\t\t     FRAME_PIXEL_HEIGHT (f),\n"
"\t\t\t     attribute_mask, &attributes);\n"
"  unblock_input ();\n"
"}\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:761
msgid "This calls the function `android_create_window' with some arguments whose meanings are identical to the arguments to `XCreateWindow'."
msgstr "これが同じ引数で関数`android_create_window`を呼び出す。引数の意味は`XCreateWindow`の場合と同じだ。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:763
msgid "Here is the definition of `android_create_window', in android.c:"
msgstr "以下はandroid.cにおける`android_create_window`の定義:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:776
#, no-wrap
msgid ""
"android_window\n"
"android_create_window (android_window parent, int x, int y,\n"
"\t\t       int width, int height,\n"
"\t\t       enum android_window_value_mask value_mask,\n"
"\t\t       struct android_set_window_attributes *attrs)\n"
"{\n"
"  static jclass class;\n"
"  static jmethodID constructor;\n"
"  jobject object, parent_object, old;\n"
"  android_window window;\n"
"  android_handle prev_max_handle;\n"
"  bool override_redirect;\n"
msgstr ""
"```java\n"
"android_window\n"
"android_create_window (android_window parent, int x, int y,\n"
"\t\t       int width, int height,\n"
"\t\t       enum android_window_value_mask value_mask,\n"
"\t\t       struct android_set_window_attributes *attrs)\n"
"{\n"
"  static jclass class;\n"
"  static jmethodID constructor;\n"
"  jobject object, parent_object, old;\n"
"  android_window window;\n"
"  android_handle prev_max_handle;\n"
"  bool override_redirect;\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:778
msgid "What does it do? First, some context:"
msgstr "何を行うのだろうか? コンテキストを少々説明しよう:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:784
msgid "At any time, there can be at most 65535 Java objects referred to by the rest of Emacs through the Java native interface.  Each such object is assigned a ``handle'' (similar to an XID on X) and given a unique type.  The function `android_resolve_handle' returns the JNI `jobject' associated with a given handle."
msgstr "任意の時点において最大で65535のJavaオブジェクトが、Javaのネイティブインターフェイスを通じてEmacsの残りの部分から参照され得る。そのようなオブジェクトにはそれぞれ`handle` (XでのXIDのようなもの)が割り当てられて、一意なタイプが付与される。`android_resolve_handle`は、そのhandleに関連付けられたJNIの`jobject`をリターンする関数だ。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:786
#, no-wrap
msgid "  parent_object = android_resolve_handle (parent, ANDROID_HANDLE_WINDOW);\n"
msgstr ""
"```java\n"
"  parent_object = android_resolve_handle (parent, ANDROID_HANDLE_WINDOW);\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:789
msgid "Here, it is being used to look up the `jobject' associated with the `parent' handle."
msgstr "ここでは`parent`というhandleに関連付けられている`jobject`を検索するために使用されている。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:792
#, no-wrap
msgid ""
"  prev_max_handle = max_handle;\n"
"  window = android_alloc_id ();\n"
msgstr ""
"```java\n"
"  prev_max_handle = max_handle;\n"
"  window = android_alloc_id ();\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:795
msgid "Next, `max_handle' is saved, and a new handle is allocated for `window'."
msgstr "`max_handle`が保存されて、今度は`window`にたいして新たなhandleが割り当てられる。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:798
#, no-wrap
msgid ""
"  if (!window)\n"
"    error (\"Out of window handles!\");\n"
msgstr ""
"```java\n"
"  if (!window)\n"
"    error (\"Out of window handles!\");\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:800
msgid "An error is signaled if Emacs runs out of available handles."
msgstr "Emacsが利用可能なlhandleを使い切ったときは、エラーがシグナルされる。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:806
#, no-wrap
msgid ""
"  if (!class)\n"
"    {\n"
"      class = (*android_java_env)->FindClass (android_java_env,\n"
"\t\t\t\t\t      \"org/gnu/emacs/EmacsWindow\");\n"
"      assert (class != NULL);\n"
msgstr ""
"```java\n"
"  if (!class)\n"
"    {\n"
"      class = (*android_java_env)->FindClass (android_java_env,\n"
"\t\t\t\t\t      \"org/gnu/emacs/EmacsWindow\");\n"
"      assert (class != NULL);\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:809
msgid "Then, if this initialization has not yet been completed, Emacs proceeds to find the Java class named ``EmacsWindow''."
msgstr "この初期化がまだ完了していない場合には、Emacsは`EmacsWindow`という名前のJavaクラスの検索を実行する。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:815
#, no-wrap
msgid ""
"      constructor\n"
"\t= (*android_java_env)->GetMethodID (android_java_env, class, \"<init>\",\n"
"\t\t\t\t\t    \"(SLorg/gnu/emacs/EmacsWindow;\"\n"
"\t\t\t\t\t    \"IIIIZ)V\");\n"
"      assert (constructor != NULL);\n"
msgstr ""
"```java\n"
"      constructor\n"
"\t= (*android_java_env)->GetMethodID (android_java_env, class, \"<init>\",\n"
"\t\t\t\t\t    \"(SLorg/gnu/emacs/EmacsWindow;\"\n"
"\t\t\t\t\t    \"IIIIZ)V\");\n"
"      assert (constructor != NULL);\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:818
msgid "And it tries to look up the constructor, which should take seven arguments:"
msgstr "そしてconstructorを見つける、引数は7つの筈だ:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:826
#, no-wrap
msgid ""
"  S\t\t\t\t\t- a short.  (the handle ID)\n"
"  Lorg/gnu/Emacs/EmacsWindow;\t\t- an instance of the EmacsWindow\n"
"\t\t\t\t\t  class.  (the parent)\n"
"  IIII\t\t\t\t\t- four ints.  (the window geometry.)\n"
"  Z\t\t\t\t\t- a boolean.  (whether or not the\n"
"\t\t\t\t\t  window is override-redirect; see\n"
"\t\t\t\t\t  XChangeWindowAttributes.)\n"
msgstr ""
"- S :: データはshort(lhandleのID)\n"
"- Lorg/gnu/Emacs/EmacsWindow; :: EmacsWindowクラスのインスタンス(親)\n"
"- IIII :: 4つの整数(ウィンドウジオメトリ)\n"
"- Z :: ブール値(そのウィンドウがoverride-redirectかどうか; XChangeWindowAttributesを参照)\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:831
#, no-wrap
msgid ""
"      old = class;\n"
"      class = (*android_java_env)->NewGlobalRef (android_java_env, class);\n"
"      (*android_java_env)->ExceptionClear (android_java_env);\n"
"      ANDROID_DELETE_LOCAL_REF (old);\n"
msgstr ""
"```java\n"
"      old = class;\n"
"      class = (*android_java_env)->NewGlobalRef (android_java_env, class);\n"
"      (*android_java_env)->ExceptionClear (android_java_env);\n"
"      ANDROID_DELETE_LOCAL_REF (old);\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:835
msgid "Next, it saves a global reference to the class and deletes the local reference.  Global references will never be deallocated by the Java virtual machine as long as they still exist."
msgstr "次にクラスへのグローバルリファレンスを保存、ローカルリファレンスを削除する。グローバルリファレンスは、存在し続けるかぎりはJava仮想マシンによって割り当て開放されることはない。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:839
#, no-wrap
msgid ""
"      if (!class)\n"
"\tmemory_full (0);\n"
"    }\n"
msgstr ""
"```java\n"
"      if (!class)\n"
"\tmemory_full (0);\n"
"    }\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:845
#, no-wrap
msgid ""
"  /* N.B. that ANDROID_CW_OVERRIDE_REDIRECT can only be set at window\n"
"     creation time.  */\n"
"  override_redirect = ((value_mask\n"
"\t\t\t& ANDROID_CW_OVERRIDE_REDIRECT)\n"
"\t\t       && attrs->override_redirect);\n"
msgstr ""
"  /* 注意: ANDROID_CW_OVERRIDE_REDIRECTはウィンドウ作成時しか\n"
"     セットできない     */\n"
"  override_redirect = ((value_mask\n"
"\t\t\t& ANDROID_CW_OVERRIDE_REDIRECT)\n"
"\t\t       && attrs->override_redirect);\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:851
#, no-wrap
msgid ""
"  object = (*android_java_env)->NewObject (android_java_env, class,\n"
"\t\t\t\t\t   constructor, (jshort) window,\n"
"\t\t\t\t\t   parent_object, (jint) x, (jint) y,\n"
"\t\t\t\t\t   (jint) width, (jint) height,\n"
"\t\t\t\t\t   (jboolean) override_redirect);\n"
msgstr ""
"  object = (*android_java_env)->NewObject (android_java_env, class,\n"
"\t\t\t\t\t   constructor, (jshort) window,\n"
"\t\t\t\t\t   parent_object, (jint) x, (jint) y,\n"
"\t\t\t\t\t   (jint) width, (jint) height,\n"
"\t\t\t\t\t   (jboolean) override_redirect);\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:854
msgid "Then, it creates an instance of the ``EmacsWindow'' class with the appropriate arguments and previously determined constructor."
msgstr "そして適切な引数と前に見つけたconstructorで、`EmacsWindow`のインスタンスを作成する。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:858
#, no-wrap
msgid ""
"  if (!object)\n"
"    {\n"
"      (*android_java_env)->ExceptionClear (android_java_env);\n"
msgstr ""
"```java\n"
"  if (!object)\n"
"    {\n"
"      (*android_java_env)->ExceptionClear (android_java_env);\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:861
#, no-wrap
msgid ""
"      max_handle = prev_max_handle;\n"
"      memory_full (0);\n"
msgstr ""
"      max_handle = prev_max_handle;\n"
"      memory_full (0);\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:865
#, no-wrap
msgid ""
"If creating the object fails, Emacs clears the ``pending exception''\n"
"and signals that it is out of memory.\n"
"    }\n"
msgstr ""
"オブジェクトの作成に失敗した場合には、Emacsは\"保留中の例外\"をクリアーしてから\"out of memory(メモリ不足)\"をシグナルする。\n"
"```java\n"
"    }\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:872
#, no-wrap
msgid ""
"  android_handles[window].type = ANDROID_HANDLE_WINDOW;\n"
"  android_handles[window].handle\n"
"    = (*android_java_env)->NewGlobalRef (android_java_env,\n"
"\t\t\t\t\t object);\n"
"  (*android_java_env)->ExceptionClear (android_java_env);\n"
"  ANDROID_DELETE_LOCAL_REF (object);\n"
msgstr ""
"  android_handles[window].type = ANDROID_HANDLE_WINDOW;\n"
"  android_handles[window].handle\n"
"    = (*android_java_env)->NewGlobalRef (android_java_env,\n"
"\t\t\t\t\t object);\n"
"  (*android_java_env)->ExceptionClear (android_java_env);\n"
"  ANDROID_DELETE_LOCAL_REF (object);\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:876
msgid "Otherwise, it associates a new global reference to the object with the handle, and deletes the local reference returned from the JNI NewObject function."
msgstr "成功した場合にはそのオブジェクトにhandleと新たなグローバルリファレンスが割り当てられて、JNIのNewObject関数からリターンされたローカルリファレンスは削除する。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:879
#, no-wrap
msgid ""
"  if (!android_handles[window].handle)\n"
"    memory_full (0);\n"
msgstr ""
"```java\n"
"  if (!android_handles[window].handle)\n"
"    memory_full (0);\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:882
msgid "If allocating the global reference fails, Emacs signals that it is out of memory."
msgstr "グローバルリファレンスの割り当てに失敗した場合にも、Emacsは\"out of memory\"をシグナルする。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:885
#, no-wrap
msgid ""
"  android_change_window_attributes (window, value_mask, attrs);\n"
"  return window;\n"
msgstr ""
"```java\n"
"  android_change_window_attributes (window, value_mask, attrs);\n"
"  return window;\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:889
msgid "Otherwise, it applies the specified window attributes and returns the handle of the new window.  }"
msgstr ""
"成功した場合には指定されたウィンドウ属性を適用して、新たなウィンドウのhandleをリターンする。\n"
"```java\n"
"}\n"
"```"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:893
msgid "DRAWABLES, CURSORS AND HANDLES"
msgstr "## DRAWABLES, CURSORS AND HANDLES"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:896
msgid "Each widget created by Emacs corresponds to a single ``window'', which has its own backing store.  This arrangement is quite similar to X."
msgstr "Emacsが作成したwidgetはそれぞれ、独自のバッキングストアをもった単一の`window`に対応する。これはXと非常に似た采配といえよう。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:901
msgid "C code does not directly refer to the EmacsView widgets that implement the UI logic behind windows.  Instead, its handles refer to EmacsWindow structures, which contain the state necessary to interact with the widgets in an orderly and synchronized manner."
msgstr "ウィンドウ背後にあるUIロジックを実装するEmacsViewのwidgetそれぞれを、Cコードが直接参照することはない。Cコードは順序よく同期してwidgetと相互作用を行うために必要となる、state(状態)を含んだEmacsWindowをかわりに参照して処理を行う。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:907
msgid "Like X, both pixmaps and windows are drawable resources, and the same graphics operations can be applied to both.  Thus, a separate EmacsPixmap structure is used to wrap around Android Bitmap resources, and the Java-level graphics operation functions are capable of operating on them both."
msgstr "Xと同じようにpixmapとwindowはどちらもドローワブル(drawable: 描画可能)なリソースであり、いずれも同じグラフィック操作を適用できる。したがってEmacsPixmapのstructureはそれぞれ個別にAndroidのBitmapリソースをラップできるし、Javaレベルのグラフィック操作関数はどちらも処理する能力がある。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:913
msgid "Finally, graphics contexts are maintained on both the C and Java levels; the C state recorded in `struct android_gc' is kept in sync with the Java state in the GContext handle's corresponding EmacsGC structure, and cursors are used through handles that refer to EmacsCursor structures that hold system PointerIcons."
msgstr "最後にグラフィックコンテキストはCとJavaの両方のレベルで保守されている。Cのstate(`struct android_gc`の中に記録されている)とJavaのstate(EmacsGC構造体に相当するGContextのhandleにある)との同期を保つとともに、カーソルもシステムのPointerIconsを保持しているEmacsCursor構造体を参照するhandleを介して使用される。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:915
msgid "In all cases, the interfaces provided are identical to X."
msgstr "すべての状況において、提供されているインターフェイスはXの場合と同じだ。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:919
msgid "EVENT LOOP"
msgstr "## EVENT LOOP"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:926
msgid "In a typical Android application, the event loop is managed by the operating system, and callbacks (implemented through overriding separate functions in widgets) are run by the event loop wherever necessary.  The thread which runs the event loop is also the only thread capable of creating and manipulating widgets and activities, and is referred to as the ``UI thread''."
msgstr "典型的なAndroidアプリケーションではイベントループはオペレーティングシステムによって管理されており、必要であれば常にイベントループによってコールバック(widgetの個々の関数をオーバーライドすることにより実装する)が実行される。イベントループが実行するスレッドは、widgetやactivityの作成と操作ができる唯一のスレッドでもあり、`UI thread`と呼ばれている。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:933
msgid "These callbacks are used by Emacs to write representations of X-like events to a separate event queue, which are then read from Emacs's own event loop running in a separate thread.  This is accomplished through replacing `select' by a function which waits for the event queue to be occupied, in addition to any file descriptors that `select' would normally wait for."
msgstr "これらのコールバックはEmacsがXに似たイベント表現を、個々のイベントキューに書き込むために使用される。そして書き込まれたイベントキューは、別スレッドで実行中のEmacs独自のイベントループによって読み取られることになる。これは`select`、および`select`が待機するであろうすべてのファイル記述子をイベントキューの占有を待機する関数で置き換えることによって実現している。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:937
msgid "Conversely, Emacs's event loop sometimes needs to send events to the UI thread.  These events are implemented as tiny fragments of code, which are run as they are received by the main thread."
msgstr "これとは反対にEmacsのイベントループの方はUIスレッドにイベントを送信する必要が間々ある。これらの少量のコードによって実装されるイベントは、メインスレッドによってこれらのイベントが受信されると実行されることになる。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:940
msgid "A typical example is `displayToast', which is implemented in EmacsService.java:"
msgstr "典型的な例は`displayToast`だ。これはEmacsService.javaに実装されている:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:950
#, no-wrap
msgid ""
"  public void\n"
"  displayToast (final String string)\n"
"  {\n"
"    runOnUiThread (new Runnable () {\n"
"\t@Override\n"
"\tpublic void\n"
"\trun ()\n"
"\t{\n"
"\t  Toast toast;\n"
msgstr ""
"```java\n"
"  public void\n"
"  displayToast (final String string)\n"
"  {\n"
"    runOnUiThread (new Runnable () {\n"
"\t@Override\n"
"\tpublic void\n"
"\trun ()\n"
"\t{\n"
"\t  Toast toast;\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:957
#, no-wrap
msgid ""
"\t  toast = Toast.makeText (getApplicationContext (),\n"
"\t\t\t\t  string, Toast.LENGTH_SHORT);\n"
"\t  toast.show ();\n"
"\t}\n"
"      });\n"
"  }\n"
msgstr ""
"\t  toast = Toast.makeText (getApplicationContext (),\n"
"\t\t\t\t  string, Toast.LENGTH_SHORT);\n"
"\t  toast.show ();\n"
"\t}\n"
"      });\n"
"  }\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:962
msgid "Here, the variable `string' is used by a nested function.  This nested function contains a copy of that variable, and is run on the main thread using the function `runOnUiThread', in order to display a short status message on the display."
msgstr "ここで`string`はネストされた関数(入れ子関数)で使用される変数だ。ディスプレイ上に短いstatusメッセージを表示するために、関数`runOnUiThread`を用いてメインスレッドで実行されるこのネストされた関数には、この変数のコピーが含まれることになる。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:971
msgid "When Emacs needs to wait for the nested function to finish, it uses a mechanism implemented in `syncRunnable'.  This mechanism first calls a deadlock avoidance mechanism, then runs a nested function on the UI thread, which is expected to signal itself as a condition variable upon completion.  It is typically used to allocate resources that can only be allocated from the UI thread, or to obtain non-thread-safe information.  The following function is an example; it returns a new EmacsView widget corresponding to the provided window:"
msgstr "ネストされた関数の完了を待機する必要がある場合には、Emacsは`syncRunnable`で実装されているメカニズムを使用する。これは最初にデッドロック回避メカニズムを呼び出して、その後に完了時にはコンディション変数を自身にシグナルするネスト関数をUIスレッドで実行するというメカニズムだ。これは通常だとUIスレッドからしか割り当てられないリソースの割り当てや、スレッドセーフではない情報の取得に用いられるメカニズムだ。以下は提供されたウィンドウに相当するEmacsViewの新たなwidgetをリターンする関数の例だ:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:978
#, no-wrap
msgid ""
"  public EmacsView\n"
"  getEmacsView (final EmacsWindow window, final int visibility,\n"
"\t\tfinal boolean isFocusedByDefault)\n"
"  {\n"
"    Runnable runnable;\n"
"    final EmacsHolder<EmacsView> view;\n"
msgstr ""
"```java\n"
"  public EmacsView\n"
"  getEmacsView (final EmacsWindow window, final int visibility,\n"
"\t\tfinal boolean isFocusedByDefault)\n"
"  {\n"
"    Runnable runnable;\n"
"    final EmacsHolder<EmacsView> view;\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:980
#, no-wrap
msgid "    view = new EmacsHolder<EmacsView> ();\n"
msgstr "    view = new EmacsHolder<EmacsView> ();\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:989
#, no-wrap
msgid ""
"    runnable = new Runnable () {\n"
"\tpublic void\n"
"\trun ()\n"
"\t{\n"
"\t  synchronized (this)\n"
"\t    {\n"
"\t      view.thing = new EmacsView (window);\n"
"\t      view.thing.setVisibility (visibility);\n"
msgstr ""
"    runnable = new Runnable () {\n"
"\tpublic void\n"
"\trun ()\n"
"\t{\n"
"\t  synchronized (this)\n"
"\t    {\n"
"\t      view.thing = new EmacsView (window);\n"
"\t      view.thing.setVisibility (visibility);\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:994
#, no-wrap
msgid ""
"\t      /* The following function is only present on Android 26\n"
"\t\t or later.  */\n"
"\t      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O)\n"
"\t\tview.thing.setFocusedByDefault (isFocusedByDefault);\n"
msgstr ""
"\t      /* The following function is only present on Android 26\n"
"\t\t or later.  */\n"
"\t      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O)\n"
"\t\tview.thing.setFocusedByDefault (isFocusedByDefault);\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:999
#, no-wrap
msgid ""
"\t      notify ();\n"
"\t    }\n"
"\t}\n"
"      };\n"
msgstr ""
"\t      notify ();\n"
"\t    }\n"
"\t}\n"
"      };\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:1003
#, no-wrap
msgid ""
"    syncRunnable (runnable);\n"
"    return view.thing;\n"
"  }\n"
msgstr ""
"    syncRunnable (runnable);\n"
"    return view.thing;\n"
"  }\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:1009
msgid "As no value can be directly returned from the nested function, a separate container object is used to hold the result after the function finishes execution.  Note the type name inside the angle brackets: this type is substituted into the class definition as it is used; a definition such as:"
msgstr "ネストされた関数から値は直接リターンされないので、関数が実行を完了した後の結果を保持するためのコンテナオブジェクト別途使用する。山カッコ(angle bracket)の内側のタイプ名に注目。このタイプ名は使用するクラスの定義に置き換えられるのだ。以下のような定義は:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:1014
#, no-wrap
msgid ""
"public class Foo<T>\n"
"{\n"
"  T bar;\n"
"};\n"
msgstr ""
"```java\n"
"public class Foo<T>\n"
"{\n"
"  T bar;\n"
"};\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:1016
msgid "can not be used alone:"
msgstr "これ単独では使用できない:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:1018
#, no-wrap
msgid "  Foo holder; /* Error! */\n"
msgstr ""
"```java\n"
"  Foo holder; /* エラーになるよ! */\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:1020
msgid "but must have a type specified:"
msgstr "タイプを指定しなければならない:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:1022
#, no-wrap
msgid "  Foo<Object> holder;\n"
msgstr ""
"```java\n"
"  Foo<Object> holder;\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:1024
msgid "in which case the effective definition is:"
msgstr "この場合に効果がある定義は:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:1029
#, no-wrap
msgid ""
"public class Foo\n"
"{\n"
"  Object bar;\n"
"};\n"
msgstr ""
"```java\n"
"public class Foo\n"
"{\n"
"  Object bar;\n"
"};\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:1033
msgid "COMPATIBILITY"
msgstr "## COMPATIBILITY"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:1038
msgid "There are three variables set within every Android application that extert influence over the set of Android systems it supports, and the measures it must take to function faithfully on each of those systems: the minimum API level, compile SDK version and target API level."
msgstr "すべてのAndroidアプリケーションには、サポート対象のAndroidシステムにたいして影響を与えるために、そしてこれらのシステムそれぞれにたいして正確に機能するために必要な対策を講じるためにセットする3つの変数がある。それは最小APIレベル(minimum API level)、コンパイルSDKバージョン(compile SDK version)、ターゲットAPIレベル(target API level)という3つの変数だ。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:1043
msgid "The minimum API level is the earliest version of Android that is permitted to install and run the application.  For Emacs, this is established by detecting the __ANDROID_API__ preprocessor macro defined within the Android C compiler."
msgstr "最小APIレベルとは、そのアプリケーションのインストールと実行が許されるもっとも古いAndroidのバージョンのことだ。EmacsではAndroidのCコンパイラーで定義されているプリプロセッサマクロ__ANDROID_API__を調べて確認している。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:1047
msgid "Before Java code executes any Android API calls that are not present within Android 2.2 (API level 8), the lowest API level supported by Emacs as a whole, it must first check the value of the:"
msgstr "JavaコードがAndroid 2.2(API level 8; Emacs がサポートする最小のAPIレベルだ)では提供されていないAndroidのAPI呼び出しを実行する前に、まずは以下の値をチェックしなければならない:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:1049
#, no-wrap
msgid "  Build.VERSION.SDK_INT\n"
msgstr ""
"```text\n"
"  Build.VERSION.SDK_INT\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:1054
msgid "variable, which is always set to the API level of the system Emacs is presently installed within.  For example, before calling `dispatchKeyEventFromInputMethod', a function absent from Android 6.0 (API level 23) or earlier, check:"
msgstr "この変数には常にその時点でEmacsがインストールされているシステムのAPIレベルがセットされる。たとえば`dispatchKeyEventFromInputMethod`(Android 6.0: API level 23では提供されていない)を呼び出す前に以下のようなチェックを行う:"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:1059
#, no-wrap
msgid ""
"    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N)\n"
"      view.imManager.dispatchKeyEventFromInputMethod (view, key);\n"
"    else\n"
"      {\n"
msgstr ""
"```java\n"
"    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N)\n"
"      view.imManager.dispatchKeyEventFromInputMethod (view, key);\n"
"    else\n"
"      {\n"
"```\n"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:1061
msgid "where `N' is a constant defined to 24."
msgstr "ここで`N`は定数24に定義されている。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:1069
msgid "The compile SDK version is the version of the Android SDK headers Java code is compiled against.  Because Java does not provide conditional compilation constructs, Emacs can't be compiled with any version of these headers other than the version mentioned in `java/INSTALL', but the headers used do not affect the set of supported systems provided that the version checks illustrated above are performed where necessary."
msgstr "コンパイルSDKバージョンとは、JavaコードがコンパイルされるAndroid SDKのヘッダーのバージョンのこと。Javaは条件付きコンパイル構造を提供していないので、`java/INSTALL`記載のバージョン以外のヘッダーではEmacsをコンパイルできないが、必要に応じて上述したバージョンチェックが行われるかぎり、サポート対象となるシステムの範囲には影響しない。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:1076
msgid "The target API level is a number within java/AndroidManifest.xml.in the system refers to when deciding whether to enable backwards-incompatible modifications to the behavior of various system APIs.  For any given Android version, backwards incompatible changes in that version will be disabled for applications whose target API levels don't exceed its own."
msgstr "ターゲットAPIレベルとは、さまざまなシステムAPIの動作にたいする後方互換性のない変更を有効にするかどうか判断する際に、システムが参照するjava/AndroidManifest.xml.inで定義されている数値のこと。どのAndroidバージョンにおいても、そのアプリケーションのターゲットAPIレベル以下のバージョンにおける後方互換性のない変更は無効になる。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:1081
msgid "The target API should nevertheless be updated to match every major Android update, as Google has stated their intentions to prohibit users from installing applications targeting ``out-of-date'' versions of Android, though this threat has hitherto been made good on."
msgstr "GoogleがAndroidの\"時代遅れ\"のバージョンをターゲットとするアプリケーションをユーザーがインストールことを禁止する意向を表明しているので、Androidのメジャーバージョンアップに合わせてターゲットAPIを更新する必要があるものの、これまでのところこの脅威にたいしては上手く対処できている。"

#. type: Plain text
#: emacs-30/admin/notes/java_editable:1085
msgid "This file is part of GNU Emacs."
msgstr ""
"```text\n"
"This file is part of GNU Emacs."

#. type: Plain text
#: emacs-30/admin/notes/java_editable:1090
msgid "GNU Emacs is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version."
msgstr "GNU Emacs is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version."

#. type: Plain text
#: emacs-30/admin/notes/java_editable:1095
msgid "GNU Emacs is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details."
msgstr "GNU Emacs is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details."

#. type: Plain text
#: emacs-30/admin/notes/java_editable:1097
msgid "You should have received a copy of the GNU General Public License along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>."
msgstr ""
"You should have received a copy of the GNU General Public License along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>.\n"
"```"
